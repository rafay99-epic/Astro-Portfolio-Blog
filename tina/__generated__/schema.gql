# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  newsletter(relativePath: String): Newsletter!
  newsletterConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NewsletterFilter): NewsletterConnection!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
  siteConfig(relativePath: String): SiteConfig!
  siteConfigConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteConfigFilter): SiteConfigConnection!
  featureFlags(relativePath: String): FeatureFlags!
  featureFlagsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FeatureFlagsFilter): FeatureFlagsConnection!
  popularBlogs(relativePath: String): PopularBlogs!
  popularBlogsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PopularBlogsFilter): PopularBlogsConnection!
  ideaPanel(relativePath: String): IdeaPanel!
  ideaPanelConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: IdeaPanelFilter): IdeaPanelConnection!
}

input DocumentFilter {
  post: PostFilter
  newsletter: NewsletterFilter
  projects: ProjectsFilter
  siteConfig: SiteConfigFilter
  featureFlags: FeatureFlagsFilter
  popularBlogs: PopularBlogsFilter
  ideaPanel: IdeaPanelFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Newsletter | Projects | SiteConfig | FeatureFlags | PopularBlogs | IdeaPanel | Folder

type Post implements Node & Document {
  title: String!
  description: String!
  pubDate: String!
  draft: Boolean!
  heroImage: String
  authorName: String
  authorAvatar: String
  body: JSON
  tags: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  description: StringFilter
  pubDate: DatetimeFilter
  draft: BooleanFilter
  heroImage: ImageFilter
  authorName: StringFilter
  authorAvatar: ImageFilter
  body: RichTextFilter
  tags: StringFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Newsletter implements Node & Document {
  title: String!
  summary: String!
  pubDate: String!
  draft: Boolean!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NewsletterFilter {
  title: StringFilter
  summary: StringFilter
  pubDate: DatetimeFilter
  draft: BooleanFilter
  body: RichTextFilter
}

type NewsletterConnectionEdges {
  cursor: String!
  node: Newsletter
}

type NewsletterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NewsletterConnectionEdges]
}

type Projects implements Node & Document {
  Projecttitle: String!
  ProjectDescription: String!
  ProjectImage: String!
  draft: Boolean!
  ProjectTech: [String]
  ProjectCategory: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProjectsFilter {
  Projecttitle: StringFilter
  ProjectDescription: StringFilter
  ProjectImage: ImageFilter
  draft: BooleanFilter
  ProjectTech: StringFilter
  ProjectCategory: StringFilter
  body: RichTextFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type SiteConfigSocialLinks {
  twitter: String
  linkedin: String
  github: String
  upwork: String
  youtube: String
  whatsNumber: String
}

type SiteConfigAbout {
  whoAmI: String
  lifeBeyondCode: String
  continuousLearning: String
}

type SiteConfigTechStack {
  category: String
  tools: [String]
}

type SiteConfigWorkExperience {
  companyName: String
  position: String
  employmentTime: String
  roles: [String]
  toolsUsed: [String]
}

type SiteConfig implements Node & Document {
  SiteName: String!
  SiteDescription: String!
  name: String!
  jobTitle: String!
  position: String!
  picture: String
  avator: String
  socialLinks: SiteConfigSocialLinks
  about: SiteConfigAbout
  techStack: [SiteConfigTechStack]
  workExperience: [SiteConfigWorkExperience]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteConfigSocialLinksFilter {
  twitter: StringFilter
  linkedin: StringFilter
  github: StringFilter
  upwork: StringFilter
  youtube: StringFilter
  whatsNumber: StringFilter
}

input SiteConfigAboutFilter {
  whoAmI: StringFilter
  lifeBeyondCode: StringFilter
  continuousLearning: StringFilter
}

input SiteConfigTechStackFilter {
  category: StringFilter
  tools: StringFilter
}

input SiteConfigWorkExperienceFilter {
  companyName: StringFilter
  position: StringFilter
  employmentTime: StringFilter
  roles: StringFilter
  toolsUsed: StringFilter
}

input SiteConfigFilter {
  SiteName: StringFilter
  SiteDescription: StringFilter
  name: StringFilter
  jobTitle: StringFilter
  position: StringFilter
  picture: ImageFilter
  avator: ImageFilter
  socialLinks: SiteConfigSocialLinksFilter
  about: SiteConfigAboutFilter
  techStack: SiteConfigTechStackFilter
  workExperience: SiteConfigWorkExperienceFilter
}

type SiteConfigConnectionEdges {
  cursor: String!
  node: SiteConfig
}

type SiteConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConfigConnectionEdges]
}

type FeatureFlagsFeatureFlags {
  showBlog: Boolean
  showAbout: Boolean
  showContact: Boolean
  showProjects: Boolean
  showIndex: Boolean
  showTags: Boolean
  showSearch: Boolean
  showNewsletter: Boolean
  showPrivacy: Boolean
  showTermsOfService: Boolean
  showSubNewsletter: Boolean
  showTrendingPosts: Boolean
  showTermsandConditions: Boolean
  showPrivacyPolicy: Boolean
  showIdeaPanel: Boolean
}

type FeatureFlagsFeatureFlagsApi {
  enableNotionAPI: Boolean
  enableauthorInfoAPI: Boolean
  enableUmamiServiceAPI: Boolean
}

type FeatureFlags implements Node & Document {
  featureFlags: FeatureFlagsFeatureFlags
  FeatureFlagsApi: FeatureFlagsFeatureFlagsApi
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FeatureFlagsFeatureFlagsFilter {
  showBlog: BooleanFilter
  showAbout: BooleanFilter
  showContact: BooleanFilter
  showProjects: BooleanFilter
  showIndex: BooleanFilter
  showTags: BooleanFilter
  showSearch: BooleanFilter
  showNewsletter: BooleanFilter
  showPrivacy: BooleanFilter
  showTermsOfService: BooleanFilter
  showSubNewsletter: BooleanFilter
  showTrendingPosts: BooleanFilter
  showTermsandConditions: BooleanFilter
  showPrivacyPolicy: BooleanFilter
  showIdeaPanel: BooleanFilter
}

input FeatureFlagsFeatureFlagsApiFilter {
  enableNotionAPI: BooleanFilter
  enableauthorInfoAPI: BooleanFilter
  enableUmamiServiceAPI: BooleanFilter
}

input FeatureFlagsFilter {
  featureFlags: FeatureFlagsFeatureFlagsFilter
  FeatureFlagsApi: FeatureFlagsFeatureFlagsApiFilter
}

type FeatureFlagsConnectionEdges {
  cursor: String!
  node: FeatureFlags
}

type FeatureFlagsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FeatureFlagsConnectionEdges]
}

type PopularBlogsPopularBlogs {
  Page: String!
  Visitors: Float!
  Total: Float!
}

type PopularBlogs implements Node & Document {
  popularBlogs: [PopularBlogsPopularBlogs]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PopularBlogsPopularBlogsFilter {
  Page: StringFilter
  Visitors: NumberFilter
  Total: NumberFilter
}

input PopularBlogsFilter {
  popularBlogs: PopularBlogsPopularBlogsFilter
}

type PopularBlogsConnectionEdges {
  cursor: String!
  node: PopularBlogs
}

type PopularBlogsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PopularBlogsConnectionEdges]
}

type IdeaPanelCategoriesIdeas {
  title: String!
  description: String!
  stage: String!
}

type IdeaPanelCategories {
  category: String!
  ideas: [IdeaPanelCategoriesIdeas]
}

type IdeaPanel implements Node & Document {
  categories: [IdeaPanelCategories]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input IdeaPanelCategoriesIdeasFilter {
  title: StringFilter
  description: StringFilter
  stage: StringFilter
}

input IdeaPanelCategoriesFilter {
  category: StringFilter
  ideas: IdeaPanelCategoriesIdeasFilter
}

input IdeaPanelFilter {
  categories: IdeaPanelCategoriesFilter
}

type IdeaPanelConnectionEdges {
  cursor: String!
  node: IdeaPanel
}

type IdeaPanelConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [IdeaPanelConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateNewsletter(relativePath: String!, params: NewsletterMutation!): Newsletter!
  createNewsletter(relativePath: String!, params: NewsletterMutation!): Newsletter!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  updateSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
  createSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
  updateFeatureFlags(relativePath: String!, params: FeatureFlagsMutation!): FeatureFlags!
  createFeatureFlags(relativePath: String!, params: FeatureFlagsMutation!): FeatureFlags!
  updatePopularBlogs(relativePath: String!, params: PopularBlogsMutation!): PopularBlogs!
  createPopularBlogs(relativePath: String!, params: PopularBlogsMutation!): PopularBlogs!
  updateIdeaPanel(relativePath: String!, params: IdeaPanelMutation!): IdeaPanel!
  createIdeaPanel(relativePath: String!, params: IdeaPanelMutation!): IdeaPanel!
}

input DocumentUpdateMutation {
  post: PostMutation
  newsletter: NewsletterMutation
  projects: ProjectsMutation
  siteConfig: SiteConfigMutation
  featureFlags: FeatureFlagsMutation
  popularBlogs: PopularBlogsMutation
  ideaPanel: IdeaPanelMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  newsletter: NewsletterMutation
  projects: ProjectsMutation
  siteConfig: SiteConfigMutation
  featureFlags: FeatureFlagsMutation
  popularBlogs: PopularBlogsMutation
  ideaPanel: IdeaPanelMutation
}

input PostMutation {
  title: String
  description: String
  pubDate: String
  draft: Boolean
  heroImage: String
  authorName: String
  authorAvatar: String
  body: JSON
  tags: [String]
}

input NewsletterMutation {
  title: String
  summary: String
  pubDate: String
  draft: Boolean
  body: JSON
}

input ProjectsMutation {
  Projecttitle: String
  ProjectDescription: String
  ProjectImage: String
  draft: Boolean
  ProjectTech: [String]
  ProjectCategory: [String]
  body: JSON
}

input SiteConfigSocialLinksMutation {
  twitter: String
  linkedin: String
  github: String
  upwork: String
  youtube: String
  whatsNumber: String
}

input SiteConfigAboutMutation {
  whoAmI: String
  lifeBeyondCode: String
  continuousLearning: String
}

input SiteConfigTechStackMutation {
  category: String
  tools: [String]
}

input SiteConfigWorkExperienceMutation {
  companyName: String
  position: String
  employmentTime: String
  roles: [String]
  toolsUsed: [String]
}

input SiteConfigMutation {
  SiteName: String
  SiteDescription: String
  name: String
  jobTitle: String
  position: String
  picture: String
  avator: String
  socialLinks: SiteConfigSocialLinksMutation
  about: SiteConfigAboutMutation
  techStack: [SiteConfigTechStackMutation]
  workExperience: [SiteConfigWorkExperienceMutation]
}

input FeatureFlagsFeatureFlagsMutation {
  showBlog: Boolean
  showAbout: Boolean
  showContact: Boolean
  showProjects: Boolean
  showIndex: Boolean
  showTags: Boolean
  showSearch: Boolean
  showNewsletter: Boolean
  showPrivacy: Boolean
  showTermsOfService: Boolean
  showSubNewsletter: Boolean
  showTrendingPosts: Boolean
  showTermsandConditions: Boolean
  showPrivacyPolicy: Boolean
  showIdeaPanel: Boolean
}

input FeatureFlagsFeatureFlagsApiMutation {
  enableNotionAPI: Boolean
  enableauthorInfoAPI: Boolean
  enableUmamiServiceAPI: Boolean
}

input FeatureFlagsMutation {
  featureFlags: FeatureFlagsFeatureFlagsMutation
  FeatureFlagsApi: FeatureFlagsFeatureFlagsApiMutation
}

input PopularBlogsPopularBlogsMutation {
  Page: String
  Visitors: Float
  Total: Float
}

input PopularBlogsMutation {
  popularBlogs: [PopularBlogsPopularBlogsMutation]
}

input IdeaPanelCategoriesIdeasMutation {
  title: String
  description: String
  stage: String
}

input IdeaPanelCategoriesMutation {
  category: String
  ideas: [IdeaPanelCategoriesIdeasMutation]
}

input IdeaPanelMutation {
  categories: [IdeaPanelCategoriesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
