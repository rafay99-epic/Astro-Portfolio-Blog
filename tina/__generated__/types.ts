//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  post: Post;
  postConnection: PostConnection;
  newsletter: Newsletter;
  newsletterConnection: NewsletterConnection;
  projects: Projects;
  projectsConnection: ProjectsConnection;
  siteConfig: SiteConfig;
  siteConfigConnection: SiteConfigConnection;
  featureFlags: FeatureFlags;
  featureFlagsConnection: FeatureFlagsConnection;
  popularBlogs: PopularBlogs;
  popularBlogsConnection: PopularBlogsConnection;
  ideaPanel: IdeaPanel;
  ideaPanelConnection: IdeaPanelConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryNewsletterArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNewsletterConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsletterFilter>;
};


export type QueryProjectsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
};


export type QuerySiteConfigArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteConfigConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteConfigFilter>;
};


export type QueryFeatureFlagsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFeatureFlagsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FeatureFlagsFilter>;
};


export type QueryPopularBlogsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPopularBlogsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PopularBlogsFilter>;
};


export type QueryIdeaPanelArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIdeaPanelConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IdeaPanelFilter>;
};

export type DocumentFilter = {
  post?: InputMaybe<PostFilter>;
  newsletter?: InputMaybe<NewsletterFilter>;
  projects?: InputMaybe<ProjectsFilter>;
  siteConfig?: InputMaybe<SiteConfigFilter>;
  featureFlags?: InputMaybe<FeatureFlagsFilter>;
  popularBlogs?: InputMaybe<PopularBlogsFilter>;
  ideaPanel?: InputMaybe<IdeaPanelFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Post | Newsletter | Projects | SiteConfig | FeatureFlags | PopularBlogs | IdeaPanel | Folder;

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  draft: Scalars['Boolean']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  authorName?: Maybe<Scalars['String']['output']>;
  authorAvatar?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  draft?: InputMaybe<BooleanFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  authorName?: InputMaybe<StringFilter>;
  authorAvatar?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
  tags?: InputMaybe<StringFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Newsletter = Node & Document & {
  __typename?: 'Newsletter';
  title: Scalars['String']['output'];
  summary: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  draft: Scalars['Boolean']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NewsletterFilter = {
  title?: InputMaybe<StringFilter>;
  summary?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  draft?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type NewsletterConnectionEdges = {
  __typename?: 'NewsletterConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Newsletter>;
};

export type NewsletterConnection = Connection & {
  __typename?: 'NewsletterConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NewsletterConnectionEdges>>>;
};

export type Projects = Node & Document & {
  __typename?: 'Projects';
  Projecttitle: Scalars['String']['output'];
  ProjectDescription: Scalars['String']['output'];
  ProjectImage: Scalars['String']['output'];
  draft: Scalars['Boolean']['output'];
  ProjectTech?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ProjectCategory?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ProjectsFilter = {
  Projecttitle?: InputMaybe<StringFilter>;
  ProjectDescription?: InputMaybe<StringFilter>;
  ProjectImage?: InputMaybe<ImageFilter>;
  draft?: InputMaybe<BooleanFilter>;
  ProjectTech?: InputMaybe<StringFilter>;
  ProjectCategory?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ProjectsConnectionEdges = {
  __typename?: 'ProjectsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Projects>;
};

export type ProjectsConnection = Connection & {
  __typename?: 'ProjectsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProjectsConnectionEdges>>>;
};

export type SiteConfigSocialLinks = {
  __typename?: 'SiteConfigSocialLinks';
  twitter?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  github?: Maybe<Scalars['String']['output']>;
  upwork?: Maybe<Scalars['String']['output']>;
  youtube?: Maybe<Scalars['String']['output']>;
  whatsNumber?: Maybe<Scalars['String']['output']>;
};

export type SiteConfigAbout = {
  __typename?: 'SiteConfigAbout';
  whoAmI?: Maybe<Scalars['String']['output']>;
  lifeBeyondCode?: Maybe<Scalars['String']['output']>;
  continuousLearning?: Maybe<Scalars['String']['output']>;
};

export type SiteConfigTechStack = {
  __typename?: 'SiteConfigTechStack';
  category?: Maybe<Scalars['String']['output']>;
  tools?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type SiteConfigWorkExperience = {
  __typename?: 'SiteConfigWorkExperience';
  companyName?: Maybe<Scalars['String']['output']>;
  position?: Maybe<Scalars['String']['output']>;
  employmentTime?: Maybe<Scalars['String']['output']>;
  roles?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  toolsUsed?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type SiteConfig = Node & Document & {
  __typename?: 'SiteConfig';
  SiteName: Scalars['String']['output'];
  SiteDescription: Scalars['String']['output'];
  name: Scalars['String']['output'];
  jobTitle: Scalars['String']['output'];
  position: Scalars['String']['output'];
  picture?: Maybe<Scalars['String']['output']>;
  avator?: Maybe<Scalars['String']['output']>;
  socialLinks?: Maybe<SiteConfigSocialLinks>;
  about?: Maybe<SiteConfigAbout>;
  techStack?: Maybe<Array<Maybe<SiteConfigTechStack>>>;
  workExperience?: Maybe<Array<Maybe<SiteConfigWorkExperience>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SiteConfigSocialLinksFilter = {
  twitter?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringFilter>;
  upwork?: InputMaybe<StringFilter>;
  youtube?: InputMaybe<StringFilter>;
  whatsNumber?: InputMaybe<StringFilter>;
};

export type SiteConfigAboutFilter = {
  whoAmI?: InputMaybe<StringFilter>;
  lifeBeyondCode?: InputMaybe<StringFilter>;
  continuousLearning?: InputMaybe<StringFilter>;
};

export type SiteConfigTechStackFilter = {
  category?: InputMaybe<StringFilter>;
  tools?: InputMaybe<StringFilter>;
};

export type SiteConfigWorkExperienceFilter = {
  companyName?: InputMaybe<StringFilter>;
  position?: InputMaybe<StringFilter>;
  employmentTime?: InputMaybe<StringFilter>;
  roles?: InputMaybe<StringFilter>;
  toolsUsed?: InputMaybe<StringFilter>;
};

export type SiteConfigFilter = {
  SiteName?: InputMaybe<StringFilter>;
  SiteDescription?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  jobTitle?: InputMaybe<StringFilter>;
  position?: InputMaybe<StringFilter>;
  picture?: InputMaybe<ImageFilter>;
  avator?: InputMaybe<ImageFilter>;
  socialLinks?: InputMaybe<SiteConfigSocialLinksFilter>;
  about?: InputMaybe<SiteConfigAboutFilter>;
  techStack?: InputMaybe<SiteConfigTechStackFilter>;
  workExperience?: InputMaybe<SiteConfigWorkExperienceFilter>;
};

export type SiteConfigConnectionEdges = {
  __typename?: 'SiteConfigConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SiteConfig>;
};

export type SiteConfigConnection = Connection & {
  __typename?: 'SiteConfigConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteConfigConnectionEdges>>>;
};

export type FeatureFlagsFeatureFlags = {
  __typename?: 'FeatureFlagsFeatureFlags';
  showBlog?: Maybe<Scalars['Boolean']['output']>;
  showAbout?: Maybe<Scalars['Boolean']['output']>;
  showContact?: Maybe<Scalars['Boolean']['output']>;
  showProjects?: Maybe<Scalars['Boolean']['output']>;
  showIndex?: Maybe<Scalars['Boolean']['output']>;
  showTags?: Maybe<Scalars['Boolean']['output']>;
  showSearch?: Maybe<Scalars['Boolean']['output']>;
  showNewsletter?: Maybe<Scalars['Boolean']['output']>;
  showPrivacy?: Maybe<Scalars['Boolean']['output']>;
  showTermsOfService?: Maybe<Scalars['Boolean']['output']>;
  showSubNewsletter?: Maybe<Scalars['Boolean']['output']>;
  showTrendingPosts?: Maybe<Scalars['Boolean']['output']>;
  showTermsandConditions?: Maybe<Scalars['Boolean']['output']>;
  showPrivacyPolicy?: Maybe<Scalars['Boolean']['output']>;
  showIdeaPanel?: Maybe<Scalars['Boolean']['output']>;
};

export type FeatureFlagsFeatureFlagsApi = {
  __typename?: 'FeatureFlagsFeatureFlagsApi';
  enableNotionAPI?: Maybe<Scalars['Boolean']['output']>;
  enableauthorInfoAPI?: Maybe<Scalars['Boolean']['output']>;
  enableUmamiServiceAPI?: Maybe<Scalars['Boolean']['output']>;
};

export type FeatureFlags = Node & Document & {
  __typename?: 'FeatureFlags';
  featureFlags?: Maybe<FeatureFlagsFeatureFlags>;
  FeatureFlagsApi?: Maybe<FeatureFlagsFeatureFlagsApi>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type FeatureFlagsFeatureFlagsFilter = {
  showBlog?: InputMaybe<BooleanFilter>;
  showAbout?: InputMaybe<BooleanFilter>;
  showContact?: InputMaybe<BooleanFilter>;
  showProjects?: InputMaybe<BooleanFilter>;
  showIndex?: InputMaybe<BooleanFilter>;
  showTags?: InputMaybe<BooleanFilter>;
  showSearch?: InputMaybe<BooleanFilter>;
  showNewsletter?: InputMaybe<BooleanFilter>;
  showPrivacy?: InputMaybe<BooleanFilter>;
  showTermsOfService?: InputMaybe<BooleanFilter>;
  showSubNewsletter?: InputMaybe<BooleanFilter>;
  showTrendingPosts?: InputMaybe<BooleanFilter>;
  showTermsandConditions?: InputMaybe<BooleanFilter>;
  showPrivacyPolicy?: InputMaybe<BooleanFilter>;
  showIdeaPanel?: InputMaybe<BooleanFilter>;
};

export type FeatureFlagsFeatureFlagsApiFilter = {
  enableNotionAPI?: InputMaybe<BooleanFilter>;
  enableauthorInfoAPI?: InputMaybe<BooleanFilter>;
  enableUmamiServiceAPI?: InputMaybe<BooleanFilter>;
};

export type FeatureFlagsFilter = {
  featureFlags?: InputMaybe<FeatureFlagsFeatureFlagsFilter>;
  FeatureFlagsApi?: InputMaybe<FeatureFlagsFeatureFlagsApiFilter>;
};

export type FeatureFlagsConnectionEdges = {
  __typename?: 'FeatureFlagsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<FeatureFlags>;
};

export type FeatureFlagsConnection = Connection & {
  __typename?: 'FeatureFlagsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<FeatureFlagsConnectionEdges>>>;
};

export type PopularBlogsPopularBlogs = {
  __typename?: 'PopularBlogsPopularBlogs';
  Page: Scalars['String']['output'];
  Visitors: Scalars['Float']['output'];
  Total: Scalars['Float']['output'];
};

export type PopularBlogs = Node & Document & {
  __typename?: 'PopularBlogs';
  popularBlogs?: Maybe<Array<Maybe<PopularBlogsPopularBlogs>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type PopularBlogsPopularBlogsFilter = {
  Page?: InputMaybe<StringFilter>;
  Visitors?: InputMaybe<NumberFilter>;
  Total?: InputMaybe<NumberFilter>;
};

export type PopularBlogsFilter = {
  popularBlogs?: InputMaybe<PopularBlogsPopularBlogsFilter>;
};

export type PopularBlogsConnectionEdges = {
  __typename?: 'PopularBlogsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<PopularBlogs>;
};

export type PopularBlogsConnection = Connection & {
  __typename?: 'PopularBlogsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PopularBlogsConnectionEdges>>>;
};

export type IdeaPanelCategoriesIdeas = {
  __typename?: 'IdeaPanelCategoriesIdeas';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  stage: Scalars['String']['output'];
};

export type IdeaPanelCategories = {
  __typename?: 'IdeaPanelCategories';
  category: Scalars['String']['output'];
  ideas?: Maybe<Array<Maybe<IdeaPanelCategoriesIdeas>>>;
};

export type IdeaPanel = Node & Document & {
  __typename?: 'IdeaPanel';
  categories?: Maybe<Array<Maybe<IdeaPanelCategories>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type IdeaPanelCategoriesIdeasFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  stage?: InputMaybe<StringFilter>;
};

export type IdeaPanelCategoriesFilter = {
  category?: InputMaybe<StringFilter>;
  ideas?: InputMaybe<IdeaPanelCategoriesIdeasFilter>;
};

export type IdeaPanelFilter = {
  categories?: InputMaybe<IdeaPanelCategoriesFilter>;
};

export type IdeaPanelConnectionEdges = {
  __typename?: 'IdeaPanelConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<IdeaPanel>;
};

export type IdeaPanelConnection = Connection & {
  __typename?: 'IdeaPanelConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<IdeaPanelConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePost: Post;
  createPost: Post;
  updateNewsletter: Newsletter;
  createNewsletter: Newsletter;
  updateProjects: Projects;
  createProjects: Projects;
  updateSiteConfig: SiteConfig;
  createSiteConfig: SiteConfig;
  updateFeatureFlags: FeatureFlags;
  createFeatureFlags: FeatureFlags;
  updatePopularBlogs: PopularBlogs;
  createPopularBlogs: PopularBlogs;
  updateIdeaPanel: IdeaPanel;
  createIdeaPanel: IdeaPanel;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateNewsletterArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsletterMutation;
};


export type MutationCreateNewsletterArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsletterMutation;
};


export type MutationUpdateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationCreateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationUpdateSiteConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteConfigMutation;
};


export type MutationCreateSiteConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteConfigMutation;
};


export type MutationUpdateFeatureFlagsArgs = {
  relativePath: Scalars['String']['input'];
  params: FeatureFlagsMutation;
};


export type MutationCreateFeatureFlagsArgs = {
  relativePath: Scalars['String']['input'];
  params: FeatureFlagsMutation;
};


export type MutationUpdatePopularBlogsArgs = {
  relativePath: Scalars['String']['input'];
  params: PopularBlogsMutation;
};


export type MutationCreatePopularBlogsArgs = {
  relativePath: Scalars['String']['input'];
  params: PopularBlogsMutation;
};


export type MutationUpdateIdeaPanelArgs = {
  relativePath: Scalars['String']['input'];
  params: IdeaPanelMutation;
};


export type MutationCreateIdeaPanelArgs = {
  relativePath: Scalars['String']['input'];
  params: IdeaPanelMutation;
};

export type DocumentUpdateMutation = {
  post?: InputMaybe<PostMutation>;
  newsletter?: InputMaybe<NewsletterMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  siteConfig?: InputMaybe<SiteConfigMutation>;
  featureFlags?: InputMaybe<FeatureFlagsMutation>;
  popularBlogs?: InputMaybe<PopularBlogsMutation>;
  ideaPanel?: InputMaybe<IdeaPanelMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  post?: InputMaybe<PostMutation>;
  newsletter?: InputMaybe<NewsletterMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  siteConfig?: InputMaybe<SiteConfigMutation>;
  featureFlags?: InputMaybe<FeatureFlagsMutation>;
  popularBlogs?: InputMaybe<PopularBlogsMutation>;
  ideaPanel?: InputMaybe<IdeaPanelMutation>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  authorName?: InputMaybe<Scalars['String']['input']>;
  authorAvatar?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NewsletterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  summary?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ProjectsMutation = {
  Projecttitle?: InputMaybe<Scalars['String']['input']>;
  ProjectDescription?: InputMaybe<Scalars['String']['input']>;
  ProjectImage?: InputMaybe<Scalars['String']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  ProjectTech?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  ProjectCategory?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SiteConfigSocialLinksMutation = {
  twitter?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  github?: InputMaybe<Scalars['String']['input']>;
  upwork?: InputMaybe<Scalars['String']['input']>;
  youtube?: InputMaybe<Scalars['String']['input']>;
  whatsNumber?: InputMaybe<Scalars['String']['input']>;
};

export type SiteConfigAboutMutation = {
  whoAmI?: InputMaybe<Scalars['String']['input']>;
  lifeBeyondCode?: InputMaybe<Scalars['String']['input']>;
  continuousLearning?: InputMaybe<Scalars['String']['input']>;
};

export type SiteConfigTechStackMutation = {
  category?: InputMaybe<Scalars['String']['input']>;
  tools?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SiteConfigWorkExperienceMutation = {
  companyName?: InputMaybe<Scalars['String']['input']>;
  position?: InputMaybe<Scalars['String']['input']>;
  employmentTime?: InputMaybe<Scalars['String']['input']>;
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  toolsUsed?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SiteConfigMutation = {
  SiteName?: InputMaybe<Scalars['String']['input']>;
  SiteDescription?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  jobTitle?: InputMaybe<Scalars['String']['input']>;
  position?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
  avator?: InputMaybe<Scalars['String']['input']>;
  socialLinks?: InputMaybe<SiteConfigSocialLinksMutation>;
  about?: InputMaybe<SiteConfigAboutMutation>;
  techStack?: InputMaybe<Array<InputMaybe<SiteConfigTechStackMutation>>>;
  workExperience?: InputMaybe<Array<InputMaybe<SiteConfigWorkExperienceMutation>>>;
};

export type FeatureFlagsFeatureFlagsMutation = {
  showBlog?: InputMaybe<Scalars['Boolean']['input']>;
  showAbout?: InputMaybe<Scalars['Boolean']['input']>;
  showContact?: InputMaybe<Scalars['Boolean']['input']>;
  showProjects?: InputMaybe<Scalars['Boolean']['input']>;
  showIndex?: InputMaybe<Scalars['Boolean']['input']>;
  showTags?: InputMaybe<Scalars['Boolean']['input']>;
  showSearch?: InputMaybe<Scalars['Boolean']['input']>;
  showNewsletter?: InputMaybe<Scalars['Boolean']['input']>;
  showPrivacy?: InputMaybe<Scalars['Boolean']['input']>;
  showTermsOfService?: InputMaybe<Scalars['Boolean']['input']>;
  showSubNewsletter?: InputMaybe<Scalars['Boolean']['input']>;
  showTrendingPosts?: InputMaybe<Scalars['Boolean']['input']>;
  showTermsandConditions?: InputMaybe<Scalars['Boolean']['input']>;
  showPrivacyPolicy?: InputMaybe<Scalars['Boolean']['input']>;
  showIdeaPanel?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeatureFlagsFeatureFlagsApiMutation = {
  enableNotionAPI?: InputMaybe<Scalars['Boolean']['input']>;
  enableauthorInfoAPI?: InputMaybe<Scalars['Boolean']['input']>;
  enableUmamiServiceAPI?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeatureFlagsMutation = {
  featureFlags?: InputMaybe<FeatureFlagsFeatureFlagsMutation>;
  FeatureFlagsApi?: InputMaybe<FeatureFlagsFeatureFlagsApiMutation>;
};

export type PopularBlogsPopularBlogsMutation = {
  Page?: InputMaybe<Scalars['String']['input']>;
  Visitors?: InputMaybe<Scalars['Float']['input']>;
  Total?: InputMaybe<Scalars['Float']['input']>;
};

export type PopularBlogsMutation = {
  popularBlogs?: InputMaybe<Array<InputMaybe<PopularBlogsPopularBlogsMutation>>>;
};

export type IdeaPanelCategoriesIdeasMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Scalars['String']['input']>;
};

export type IdeaPanelCategoriesMutation = {
  category?: InputMaybe<Scalars['String']['input']>;
  ideas?: InputMaybe<Array<InputMaybe<IdeaPanelCategoriesIdeasMutation>>>;
};

export type IdeaPanelMutation = {
  categories?: InputMaybe<Array<InputMaybe<IdeaPanelCategoriesMutation>>>;
};

export type PostPartsFragment = { __typename?: 'Post', title: string, description: string, pubDate: string, draft: boolean, heroImage?: string | null, authorName?: string | null, authorAvatar?: string | null, body?: any | null, tags?: Array<string | null> | null };

export type NewsletterPartsFragment = { __typename?: 'Newsletter', title: string, summary: string, pubDate: string, draft: boolean, body?: any | null };

export type ProjectsPartsFragment = { __typename?: 'Projects', Projecttitle: string, ProjectDescription: string, ProjectImage: string, draft: boolean, ProjectTech?: Array<string | null> | null, ProjectCategory?: Array<string | null> | null, body?: any | null };

export type SiteConfigPartsFragment = { __typename?: 'SiteConfig', SiteName: string, SiteDescription: string, name: string, jobTitle: string, position: string, picture?: string | null, avator?: string | null, socialLinks?: { __typename: 'SiteConfigSocialLinks', twitter?: string | null, linkedin?: string | null, github?: string | null, upwork?: string | null, youtube?: string | null, whatsNumber?: string | null } | null, about?: { __typename: 'SiteConfigAbout', whoAmI?: string | null, lifeBeyondCode?: string | null, continuousLearning?: string | null } | null, techStack?: Array<{ __typename: 'SiteConfigTechStack', category?: string | null, tools?: Array<string | null> | null } | null> | null, workExperience?: Array<{ __typename: 'SiteConfigWorkExperience', companyName?: string | null, position?: string | null, employmentTime?: string | null, roles?: Array<string | null> | null, toolsUsed?: Array<string | null> | null } | null> | null };

export type FeatureFlagsPartsFragment = { __typename?: 'FeatureFlags', featureFlags?: { __typename: 'FeatureFlagsFeatureFlags', showBlog?: boolean | null, showAbout?: boolean | null, showContact?: boolean | null, showProjects?: boolean | null, showIndex?: boolean | null, showTags?: boolean | null, showSearch?: boolean | null, showNewsletter?: boolean | null, showPrivacy?: boolean | null, showTermsOfService?: boolean | null, showSubNewsletter?: boolean | null, showTrendingPosts?: boolean | null, showTermsandConditions?: boolean | null, showPrivacyPolicy?: boolean | null, showIdeaPanel?: boolean | null } | null, FeatureFlagsApi?: { __typename: 'FeatureFlagsFeatureFlagsApi', enableNotionAPI?: boolean | null, enableauthorInfoAPI?: boolean | null, enableUmamiServiceAPI?: boolean | null } | null };

export type PopularBlogsPartsFragment = { __typename?: 'PopularBlogs', popularBlogs?: Array<{ __typename: 'PopularBlogsPopularBlogs', Page: string, Visitors: number, Total: number } | null> | null };

export type IdeaPanelPartsFragment = { __typename?: 'IdeaPanel', categories?: Array<{ __typename: 'IdeaPanelCategories', category: string, ideas?: Array<{ __typename: 'IdeaPanelCategoriesIdeas', title: string, description: string, stage: string } | null> | null } | null> | null };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename?: 'Post', id: string, title: string, description: string, pubDate: string, draft: boolean, heroImage?: string | null, authorName?: string | null, authorAvatar?: string | null, body?: any | null, tags?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename?: 'Post', id: string, title: string, description: string, pubDate: string, draft: boolean, heroImage?: string | null, authorName?: string | null, authorAvatar?: string | null, body?: any | null, tags?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type NewsletterQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NewsletterQuery = { __typename?: 'Query', newsletter: { __typename?: 'Newsletter', id: string, title: string, summary: string, pubDate: string, draft: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type NewsletterConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsletterFilter>;
}>;


export type NewsletterConnectionQuery = { __typename?: 'Query', newsletterConnection: { __typename?: 'NewsletterConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NewsletterConnectionEdges', cursor: string, node?: { __typename?: 'Newsletter', id: string, title: string, summary: string, pubDate: string, draft: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ProjectsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProjectsQuery = { __typename?: 'Query', projects: { __typename?: 'Projects', id: string, Projecttitle: string, ProjectDescription: string, ProjectImage: string, draft: boolean, ProjectTech?: Array<string | null> | null, ProjectCategory?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ProjectsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
}>;


export type ProjectsConnectionQuery = { __typename?: 'Query', projectsConnection: { __typename?: 'ProjectsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProjectsConnectionEdges', cursor: string, node?: { __typename?: 'Projects', id: string, Projecttitle: string, ProjectDescription: string, ProjectImage: string, draft: boolean, ProjectTech?: Array<string | null> | null, ProjectCategory?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type SiteConfigQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteConfigQuery = { __typename?: 'Query', siteConfig: { __typename?: 'SiteConfig', id: string, SiteName: string, SiteDescription: string, name: string, jobTitle: string, position: string, picture?: string | null, avator?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, socialLinks?: { __typename: 'SiteConfigSocialLinks', twitter?: string | null, linkedin?: string | null, github?: string | null, upwork?: string | null, youtube?: string | null, whatsNumber?: string | null } | null, about?: { __typename: 'SiteConfigAbout', whoAmI?: string | null, lifeBeyondCode?: string | null, continuousLearning?: string | null } | null, techStack?: Array<{ __typename: 'SiteConfigTechStack', category?: string | null, tools?: Array<string | null> | null } | null> | null, workExperience?: Array<{ __typename: 'SiteConfigWorkExperience', companyName?: string | null, position?: string | null, employmentTime?: string | null, roles?: Array<string | null> | null, toolsUsed?: Array<string | null> | null } | null> | null } };

export type SiteConfigConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteConfigFilter>;
}>;


export type SiteConfigConnectionQuery = { __typename?: 'Query', siteConfigConnection: { __typename?: 'SiteConfigConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteConfigConnectionEdges', cursor: string, node?: { __typename?: 'SiteConfig', id: string, SiteName: string, SiteDescription: string, name: string, jobTitle: string, position: string, picture?: string | null, avator?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, socialLinks?: { __typename: 'SiteConfigSocialLinks', twitter?: string | null, linkedin?: string | null, github?: string | null, upwork?: string | null, youtube?: string | null, whatsNumber?: string | null } | null, about?: { __typename: 'SiteConfigAbout', whoAmI?: string | null, lifeBeyondCode?: string | null, continuousLearning?: string | null } | null, techStack?: Array<{ __typename: 'SiteConfigTechStack', category?: string | null, tools?: Array<string | null> | null } | null> | null, workExperience?: Array<{ __typename: 'SiteConfigWorkExperience', companyName?: string | null, position?: string | null, employmentTime?: string | null, roles?: Array<string | null> | null, toolsUsed?: Array<string | null> | null } | null> | null } | null } | null> | null } };

export type FeatureFlagsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type FeatureFlagsQuery = { __typename?: 'Query', featureFlags: { __typename?: 'FeatureFlags', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, featureFlags?: { __typename: 'FeatureFlagsFeatureFlags', showBlog?: boolean | null, showAbout?: boolean | null, showContact?: boolean | null, showProjects?: boolean | null, showIndex?: boolean | null, showTags?: boolean | null, showSearch?: boolean | null, showNewsletter?: boolean | null, showPrivacy?: boolean | null, showTermsOfService?: boolean | null, showSubNewsletter?: boolean | null, showTrendingPosts?: boolean | null, showTermsandConditions?: boolean | null, showPrivacyPolicy?: boolean | null, showIdeaPanel?: boolean | null } | null, FeatureFlagsApi?: { __typename: 'FeatureFlagsFeatureFlagsApi', enableNotionAPI?: boolean | null, enableauthorInfoAPI?: boolean | null, enableUmamiServiceAPI?: boolean | null } | null } };

export type FeatureFlagsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FeatureFlagsFilter>;
}>;


export type FeatureFlagsConnectionQuery = { __typename?: 'Query', featureFlagsConnection: { __typename?: 'FeatureFlagsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FeatureFlagsConnectionEdges', cursor: string, node?: { __typename?: 'FeatureFlags', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, featureFlags?: { __typename: 'FeatureFlagsFeatureFlags', showBlog?: boolean | null, showAbout?: boolean | null, showContact?: boolean | null, showProjects?: boolean | null, showIndex?: boolean | null, showTags?: boolean | null, showSearch?: boolean | null, showNewsletter?: boolean | null, showPrivacy?: boolean | null, showTermsOfService?: boolean | null, showSubNewsletter?: boolean | null, showTrendingPosts?: boolean | null, showTermsandConditions?: boolean | null, showPrivacyPolicy?: boolean | null, showIdeaPanel?: boolean | null } | null, FeatureFlagsApi?: { __typename: 'FeatureFlagsFeatureFlagsApi', enableNotionAPI?: boolean | null, enableauthorInfoAPI?: boolean | null, enableUmamiServiceAPI?: boolean | null } | null } | null } | null> | null } };

export type PopularBlogsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PopularBlogsQuery = { __typename?: 'Query', popularBlogs: { __typename?: 'PopularBlogs', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, popularBlogs?: Array<{ __typename: 'PopularBlogsPopularBlogs', Page: string, Visitors: number, Total: number } | null> | null } };

export type PopularBlogsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PopularBlogsFilter>;
}>;


export type PopularBlogsConnectionQuery = { __typename?: 'Query', popularBlogsConnection: { __typename?: 'PopularBlogsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PopularBlogsConnectionEdges', cursor: string, node?: { __typename?: 'PopularBlogs', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, popularBlogs?: Array<{ __typename: 'PopularBlogsPopularBlogs', Page: string, Visitors: number, Total: number } | null> | null } | null } | null> | null } };

export type IdeaPanelQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type IdeaPanelQuery = { __typename?: 'Query', ideaPanel: { __typename?: 'IdeaPanel', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, categories?: Array<{ __typename: 'IdeaPanelCategories', category: string, ideas?: Array<{ __typename: 'IdeaPanelCategoriesIdeas', title: string, description: string, stage: string } | null> | null } | null> | null } };

export type IdeaPanelConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IdeaPanelFilter>;
}>;


export type IdeaPanelConnectionQuery = { __typename?: 'Query', ideaPanelConnection: { __typename?: 'IdeaPanelConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'IdeaPanelConnectionEdges', cursor: string, node?: { __typename?: 'IdeaPanel', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, categories?: Array<{ __typename: 'IdeaPanelCategories', category: string, ideas?: Array<{ __typename: 'IdeaPanelCategoriesIdeas', title: string, description: string, stage: string } | null> | null } | null> | null } | null } | null> | null } };

export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  title
  description
  pubDate
  draft
  heroImage
  authorName
  authorAvatar
  body
  tags
}
    `;
export const NewsletterPartsFragmentDoc = gql`
    fragment NewsletterParts on Newsletter {
  title
  summary
  pubDate
  draft
  body
}
    `;
export const ProjectsPartsFragmentDoc = gql`
    fragment ProjectsParts on Projects {
  Projecttitle
  ProjectDescription
  ProjectImage
  draft
  ProjectTech
  ProjectCategory
  body
}
    `;
export const SiteConfigPartsFragmentDoc = gql`
    fragment SiteConfigParts on SiteConfig {
  SiteName
  SiteDescription
  name
  jobTitle
  position
  picture
  avator
  socialLinks {
    __typename
    twitter
    linkedin
    github
    upwork
    youtube
    whatsNumber
  }
  about {
    __typename
    whoAmI
    lifeBeyondCode
    continuousLearning
  }
  techStack {
    __typename
    category
    tools
  }
  workExperience {
    __typename
    companyName
    position
    employmentTime
    roles
    toolsUsed
  }
}
    `;
export const FeatureFlagsPartsFragmentDoc = gql`
    fragment FeatureFlagsParts on FeatureFlags {
  featureFlags {
    __typename
    showBlog
    showAbout
    showContact
    showProjects
    showIndex
    showTags
    showSearch
    showNewsletter
    showPrivacy
    showTermsOfService
    showSubNewsletter
    showTrendingPosts
    showTermsandConditions
    showPrivacyPolicy
    showIdeaPanel
  }
  FeatureFlagsApi {
    __typename
    enableNotionAPI
    enableauthorInfoAPI
    enableUmamiServiceAPI
  }
}
    `;
export const PopularBlogsPartsFragmentDoc = gql`
    fragment PopularBlogsParts on PopularBlogs {
  popularBlogs {
    __typename
    Page
    Visitors
    Total
  }
}
    `;
export const IdeaPanelPartsFragmentDoc = gql`
    fragment IdeaPanelParts on IdeaPanel {
  categories {
    __typename
    category
    ideas {
      __typename
      title
      description
      stage
    }
  }
}
    `;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const NewsletterDocument = gql`
    query newsletter($relativePath: String!) {
  newsletter(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NewsletterParts
  }
}
    ${NewsletterPartsFragmentDoc}`;
export const NewsletterConnectionDocument = gql`
    query newsletterConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NewsletterFilter) {
  newsletterConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NewsletterParts
      }
    }
  }
}
    ${NewsletterPartsFragmentDoc}`;
export const ProjectsDocument = gql`
    query projects($relativePath: String!) {
  projects(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProjectsParts
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ProjectsConnectionDocument = gql`
    query projectsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProjectsFilter) {
  projectsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProjectsParts
      }
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const SiteConfigDocument = gql`
    query siteConfig($relativePath: String!) {
  siteConfig(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteConfigParts
  }
}
    ${SiteConfigPartsFragmentDoc}`;
export const SiteConfigConnectionDocument = gql`
    query siteConfigConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteConfigFilter) {
  siteConfigConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteConfigParts
      }
    }
  }
}
    ${SiteConfigPartsFragmentDoc}`;
export const FeatureFlagsDocument = gql`
    query featureFlags($relativePath: String!) {
  featureFlags(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FeatureFlagsParts
  }
}
    ${FeatureFlagsPartsFragmentDoc}`;
export const FeatureFlagsConnectionDocument = gql`
    query featureFlagsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FeatureFlagsFilter) {
  featureFlagsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FeatureFlagsParts
      }
    }
  }
}
    ${FeatureFlagsPartsFragmentDoc}`;
export const PopularBlogsDocument = gql`
    query popularBlogs($relativePath: String!) {
  popularBlogs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PopularBlogsParts
  }
}
    ${PopularBlogsPartsFragmentDoc}`;
export const PopularBlogsConnectionDocument = gql`
    query popularBlogsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PopularBlogsFilter) {
  popularBlogsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PopularBlogsParts
      }
    }
  }
}
    ${PopularBlogsPartsFragmentDoc}`;
export const IdeaPanelDocument = gql`
    query ideaPanel($relativePath: String!) {
  ideaPanel(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...IdeaPanelParts
  }
}
    ${IdeaPanelPartsFragmentDoc}`;
export const IdeaPanelConnectionDocument = gql`
    query ideaPanelConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: IdeaPanelFilter) {
  ideaPanelConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...IdeaPanelParts
      }
    }
  }
}
    ${IdeaPanelPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    newsletter(variables: NewsletterQueryVariables, options?: C): Promise<{data: NewsletterQuery, variables: NewsletterQueryVariables, query: string}> {
        return requester<{data: NewsletterQuery, variables: NewsletterQueryVariables, query: string}, NewsletterQueryVariables>(NewsletterDocument, variables, options);
      },
    newsletterConnection(variables?: NewsletterConnectionQueryVariables, options?: C): Promise<{data: NewsletterConnectionQuery, variables: NewsletterConnectionQueryVariables, query: string}> {
        return requester<{data: NewsletterConnectionQuery, variables: NewsletterConnectionQueryVariables, query: string}, NewsletterConnectionQueryVariables>(NewsletterConnectionDocument, variables, options);
      },
    projects(variables: ProjectsQueryVariables, options?: C): Promise<{data: ProjectsQuery, variables: ProjectsQueryVariables, query: string}> {
        return requester<{data: ProjectsQuery, variables: ProjectsQueryVariables, query: string}, ProjectsQueryVariables>(ProjectsDocument, variables, options);
      },
    projectsConnection(variables?: ProjectsConnectionQueryVariables, options?: C): Promise<{data: ProjectsConnectionQuery, variables: ProjectsConnectionQueryVariables, query: string}> {
        return requester<{data: ProjectsConnectionQuery, variables: ProjectsConnectionQueryVariables, query: string}, ProjectsConnectionQueryVariables>(ProjectsConnectionDocument, variables, options);
      },
    siteConfig(variables: SiteConfigQueryVariables, options?: C): Promise<{data: SiteConfigQuery, variables: SiteConfigQueryVariables, query: string}> {
        return requester<{data: SiteConfigQuery, variables: SiteConfigQueryVariables, query: string}, SiteConfigQueryVariables>(SiteConfigDocument, variables, options);
      },
    siteConfigConnection(variables?: SiteConfigConnectionQueryVariables, options?: C): Promise<{data: SiteConfigConnectionQuery, variables: SiteConfigConnectionQueryVariables, query: string}> {
        return requester<{data: SiteConfigConnectionQuery, variables: SiteConfigConnectionQueryVariables, query: string}, SiteConfigConnectionQueryVariables>(SiteConfigConnectionDocument, variables, options);
      },
    featureFlags(variables: FeatureFlagsQueryVariables, options?: C): Promise<{data: FeatureFlagsQuery, variables: FeatureFlagsQueryVariables, query: string}> {
        return requester<{data: FeatureFlagsQuery, variables: FeatureFlagsQueryVariables, query: string}, FeatureFlagsQueryVariables>(FeatureFlagsDocument, variables, options);
      },
    featureFlagsConnection(variables?: FeatureFlagsConnectionQueryVariables, options?: C): Promise<{data: FeatureFlagsConnectionQuery, variables: FeatureFlagsConnectionQueryVariables, query: string}> {
        return requester<{data: FeatureFlagsConnectionQuery, variables: FeatureFlagsConnectionQueryVariables, query: string}, FeatureFlagsConnectionQueryVariables>(FeatureFlagsConnectionDocument, variables, options);
      },
    popularBlogs(variables: PopularBlogsQueryVariables, options?: C): Promise<{data: PopularBlogsQuery, variables: PopularBlogsQueryVariables, query: string}> {
        return requester<{data: PopularBlogsQuery, variables: PopularBlogsQueryVariables, query: string}, PopularBlogsQueryVariables>(PopularBlogsDocument, variables, options);
      },
    popularBlogsConnection(variables?: PopularBlogsConnectionQueryVariables, options?: C): Promise<{data: PopularBlogsConnectionQuery, variables: PopularBlogsConnectionQueryVariables, query: string}> {
        return requester<{data: PopularBlogsConnectionQuery, variables: PopularBlogsConnectionQueryVariables, query: string}, PopularBlogsConnectionQueryVariables>(PopularBlogsConnectionDocument, variables, options);
      },
    ideaPanel(variables: IdeaPanelQueryVariables, options?: C): Promise<{data: IdeaPanelQuery, variables: IdeaPanelQueryVariables, query: string}> {
        return requester<{data: IdeaPanelQuery, variables: IdeaPanelQueryVariables, query: string}, IdeaPanelQueryVariables>(IdeaPanelDocument, variables, options);
      },
    ideaPanelConnection(variables?: IdeaPanelConnectionQueryVariables, options?: C): Promise<{data: IdeaPanelConnectionQuery, variables: IdeaPanelConnectionQueryVariables, query: string}> {
        return requester<{data: IdeaPanelConnectionQuery, variables: IdeaPanelConnectionQueryVariables, query: string}, IdeaPanelConnectionQueryVariables>(IdeaPanelConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  