---
import BaseHead from "../../../../components/AstroComponent/base/BaseHead.astro";
import Header from "../../../../components/AstroComponent/header/Header.astro";
import Footer from "../../../../components/AstroComponent/footer/Footer.astro";
import authorConfig from "../../../../config/siteConfig/info.json";
import TagFilterDisplay from "../../../../components/AstroComponent/blog/comments/TagFilterDisplay.astro";
import { featureFlags } from "../../../../config/featureFlag/featureFlag.json";
import { ViewTransitions } from "astro:transitions";
import { getCollection } from "astro:content";

export const prerender = true;

export async function getStaticPaths() {
    if (!featureFlags.showTags) {
        return [];
    }

    const allPosts = (await getCollection("blog"))
        .filter((post) => !post.data.draft)
        .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

    // Get all unique tags
    const allTags = Array.from(
        new Set(allPosts.flatMap((post) => post.data.tags || [])),
    ).sort((a, b) => (a as string).localeCompare(b as string)) as string[];

    const paths: any[] = [];
    const postsPerPage = 10;

    // Generate paths for each tag and its pages
    for (const tag of allTags) {
        const filteredPosts = allPosts.filter((post) =>
            post.data.tags?.includes(tag),
        );
        const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

        // Generate paths for each page of this tag
        for (let page = 1; page <= totalPages; page++) {
            paths.push({
                params: { tag, page: page.toString() },
                props: {
                    tag,
                    page,
                    totalPages,
                    postsPerPage,
                    allPosts,
                    allTags,
                },
            });
        }
    }

    return paths;
}

const { tag, page, totalPages, postsPerPage, allPosts, allTags } = Astro.props;
const currentPage = page;

// Get posts for current tag and page
const filteredPosts = allPosts.filter((post) => post.data.tags?.includes(tag));
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const paginatedPosts = filteredPosts.slice(startIndex, endIndex);

try {
    if (!featureFlags.showTags) {
        return Astro.redirect("/access-denied");
    }
} catch (error) {
    return Astro.redirect("/404");
}
---

<html lang="en">
    <head>
        <BaseHead
            title={`Tag: ${tag} - Page ${currentPage} | ${authorConfig.SiteName}`}
            description={`Browse articles tagged with ${tag} on page ${currentPage} of ${authorConfig.SiteName}.`}
        />
        <ViewTransitions />
    </head>

    <body>
        <Header />
        <main class="w-full max-w-5xl mx-auto">
            <div>
                <TagFilterDisplay
                    allTags={allTags}
                    paginatedPosts={paginatedPosts}
                    selectedTag={tag}
                    currentPage={currentPage}
                    totalPages={totalPages}
                    currentUrl={new URL(Astro.url)}
                />
            </div>
        </main>
        <Footer class="mt-auto" />
    </body>
</html>
