---
import BaseHead from "@astro/base/BaseHead.astro";
import Header from "@astro/header/Header.astro";
import Footer from "@astro/footer/Footer.astro";
import authorConfig from "@config/siteConfig/info.json";
import { getCollection } from "astro:content";
import { featureFlags } from "@config/featureFlag/featureFlag.json";
import NotesGrid from "@react/personal/MS_Notes/MS_Notes";
export const prerender = true;

export async function getStaticPaths() {
  if (!featureFlags.showNotes) {
    return [];
  }

  const notes = await getCollection("ms_notes");
  const publishedNotes = notes.filter((note) => !note.data.lecture_draft);
  const uniqueSubjects = [
    ...new Set(publishedNotes.map((note) => note.data.subject)),
  ];

  return uniqueSubjects.map((subject) => ({
    params: { subject },
  }));
}

const { subject } = Astro.params;

if (!subject) {
  return new Response("Error: Subject parameter missing", { status: 400 });
}

const publishedNotes = await getCollection("ms_notes", ({ data }) => {
  return !data.lecture_draft && data.subject === subject;
});

const notes = publishedNotes.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

try {
  if (!featureFlags.showNotes) {
    return Astro.redirect("/access-denied");
  }
} catch (error) {
  return Astro.redirect("/404");
}
---

<html lang="en">
  <head>
    <BaseHead
      title={`MS Notes | ${subject} | ${authorConfig.SiteName}`}
      description={`Browse notes for the subject ${subject} on ${authorConfig.SiteName}.`}
    />
  </head>
  <body>
    <Header />
    <main class="pt-0 mt-0">
      <section>
        {
          notes.length > 0 ? (
            <NotesGrid notes={notes} client:load />
          ) : (
            <p class="text-center text-gray-400 mt-4">
              No notes found for this subject.
            </p>
          )
        }
      </section>
    </main>
    <section class="mt-auto">
      <Footer />
    </section>
  </body>
</html>
