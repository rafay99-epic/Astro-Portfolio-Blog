---
const processSteps = [
  {
    step: "01",
    title: "Discovery Call",
    description: "Understanding your business and identifying pain points",
    icon: "phone",
    details: [
      "Get to know the client",
      "Understand their business",
      "Analyze existing products",
      "Identify pain points",
    ],
  },
  {
    step: "02",
    title: "Requirements & Planning",
    description: "Comprehensive planning and solution approach",
    icon: "file-text",
    details: [
      "Write down requirements",
      "Note everything systematically",
      "Plan the solution approach",
      "Set project timeline",
    ],
  },
  {
    step: "03",
    title: "Design & Approval",
    description: "Visual designs and client approval process",
    icon: "palette",
    details: [
      "Set design timeline",
      "Create visual mockups",
      "Get client approval",
      "Finalize design specs",
    ],
  },
  {
    step: "04",
    title: "Development Setup",
    description: "Infrastructure and deployment pipeline setup",
    icon: "settings",
    details: [
      "Setup CI/CD pipeline",
      "Configure live preview",
      "Prepare deployment infrastructure",
      "Ensure smooth delivery",
    ],
  },
  {
    step: "05",
    title: "Coding & Testing",
    description: "Clean code development with thorough testing",
    icon: "code",
    details: [
      "Start development",
      "Write clean code",
      "Fix bugs systematically",
      "Document codebase",
    ],
  },
  {
    step: "06",
    title: "Final Review & Delivery",
    description: "Project delivery and service setup",
    icon: "zap",
    details: [
      "Final client meeting",
      "Deliver the project",
      "Setup payment for services",
      "Close the project",
    ],
  },
];
---

<style>
  /* Slider animations */
  .slider-container {
    overflow: hidden;
    border-radius: 0.75rem;
  }

  .slider-track {
    display: flex;
    transition: transform 0.6s ease-in-out;
  }

  .slider-slide {
    width: 100%;
    flex-shrink: 0;
    padding: 0 0.5rem;
  }

  @media (min-width: 640px) {
    .slider-slide {
      padding: 0 1rem;
    }
  }

  /* Step animations */
  .step-detail {
    opacity: 0;
    transform: translateX(-10px);
    animation: stepDetailIn 0.4s ease-out forwards;
  }

  .step-detail:nth-child(1) { animation-delay: 0.08s; }
  .step-detail:nth-child(2) { animation-delay: 0.16s; }
  .step-detail:nth-child(3) { animation-delay: 0.24s; }
  .step-detail:nth-child(4) { animation-delay: 0.32s; }

  @keyframes stepDetailIn {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Header animations */
  .header-animate {
    opacity: 0;
    transform: translateY(30px);
    animation: headerFadeIn 0.6s ease-out forwards;
  }

  @keyframes headerFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Slider container animation */
  .slider-animate {
    opacity: 0;
    transform: translateY(30px);
    animation: sliderFadeIn 0.8s ease-out 0.2s forwards;
  }

  @keyframes sliderFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Navigation button hover effects */
  .nav-button {
    transition: all 0.3s ease;
  }

  .nav-button:hover:not(:disabled) {
    transform: scale(1.1);
    box-shadow: 0 0 20px rgba(122, 162, 247, 0.3);
  }

  .nav-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Progress indicator animations */
  .progress-dot {
    transition: all 0.3s ease;
  }

  .progress-dot:hover {
    transform: scale(1.2);
  }

  .progress-dot.active {
    transform: scale(1.25);
  }
</style>

<section class="relative py-12 sm:py-16 px-4 sm:px-6 lg:px-8 bg-[#1a1b26] overflow-hidden">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-8 sm:mb-12 header-animate">
      <h2 class="text-3xl sm:text-4xl lg:text-5xl font-black text-[#c0caf5] mb-4">
        How We
        <span class="bg-gradient-to-r from-[#7aa2f7] to-[#bb9af7] bg-clip-text text-transparent">
          Build Stuff
        </span>
      </h2>
      <p class="text-base sm:text-lg text-[#a9b1d6] max-w-2xl mx-auto">
        A streamlined process that delivers results efficiently
      </p>
    </div>

    <!-- Slider Container -->
    <div class="relative slider-animate">
      <!-- Navigation Buttons -->
      <button
        id="prev-button"
        class="nav-button absolute left-0 top-1/2 -translate-y-1/2 z-10 w-10 h-10 sm:w-12 sm:h-12 bg-[#24283b]/80 backdrop-blur-sm border border-[#414868]/50 rounded-full flex items-center justify-center text-[#a9b1d6] hover:text-[#7aa2f7] hover:border-[#7aa2f7]/50 transition-all duration-300 -ml-6"
      >
        <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        id="next-button"
        class="nav-button absolute right-0 top-1/2 -translate-y-1/2 z-10 w-10 h-10 sm:w-12 sm:h-12 bg-[#24283b]/80 backdrop-blur-sm border border-[#414868]/50 rounded-full flex items-center justify-center text-[#a9b1d6] hover:text-[#7aa2f7] hover:border-[#7aa2f7]/50 transition-all duration-300 -mr-6"
      >
        <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Slider -->
      <div id="slider-container" class="slider-container">
        <div id="slider-track" class="slider-track">
          {processSteps.map((step, index) => (
            <div class="slider-slide" data-step={index}>
              <div class="bg-[#24283b]/50 border border-[#414868]/30 rounded-xl p-6 sm:p-8 h-full">
                <!-- Step Header -->
                <div class="flex items-center gap-4 mb-6">
                  <div class="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-r from-[#7aa2f7] to-[#bb9af7] rounded-full flex items-center justify-center text-white font-bold text-lg sm:text-xl">
                    {step.step}
                  </div>
                  <div class="flex-1">
                    <h3 class="text-xl sm:text-2xl lg:text-3xl font-bold text-[#c0caf5] mb-2">
                      {step.title}
                    </h3>
                    <p class="text-sm sm:text-base text-[#a9b1d6]">
                      {step.description}
                    </p>
                  </div>
                  <div class="text-[#7aa2f7] flex-shrink-0">
                    {step.icon === "phone" && (
                      <svg class="w-8 h-8 sm:w-10 sm:h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                      </svg>
                    )}
                    {step.icon === "file-text" && (
                      <svg class="w-8 h-8 sm:w-10 sm:h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                    )}
                    {step.icon === "palette" && (
                      <svg class="w-8 h-8 sm:w-10 sm:h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
                      </svg>
                    )}
                    {step.icon === "settings" && (
                      <svg class="w-8 h-8 sm:w-10 sm:h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      </svg>
                    )}
                    {step.icon === "code" && (
                      <svg class="w-8 h-8 sm:w-10 sm:h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                      </svg>
                    )}
                    {step.icon === "zap" && (
                      <svg class="w-8 h-8 sm:w-10 sm:h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                    )}
                  </div>
                </div>

                <!-- Step Details -->
                <div class="space-y-4">
                  <h4 class="text-sm font-semibold text-[#7aa2f7] uppercase tracking-wider">
                    What We Do
                  </h4>
                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                    {step.details.map((detail) => (
                      <div class="step-detail flex items-center gap-3">
                        <svg class="w-4 h-4 text-[#9ece6a] flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <span class="text-sm sm:text-base text-[#a9b1d6]">
                          {detail}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Progress Indicators -->
      <div class="flex justify-center gap-2 mt-6">
        {processSteps.map((_, index) => (
          <button
            class={`progress-dot w-2 h-2 sm:w-3 sm:h-3 rounded-full transition-all duration-300 ${
              index === 0 ? "bg-[#7aa2f7] active" : "bg-[#414868] hover:bg-[#7aa2f7]/50"
            }`}
            data-step={index}
          ></button>
        ))}
      </div>

      <!-- Step Counter -->
      <div class="text-center mt-4">
        <span class="text-sm text-[#a9b1d6]">
          <span id="current-step" class="text-[#7aa2f7] font-semibold">01</span>
          / <span id="total-steps">{String(processSteps.length).padStart(2, "0")}</span>
        </span>
      </div>
    </div>
  </div>
</section>

<script>
  let currentStep = 0;
  const totalSteps = 6;
  const sliderTrack = document.getElementById('slider-track') as HTMLElement;
  const prevButton = document.getElementById('prev-button') as HTMLButtonElement;
  const nextButton = document.getElementById('next-button') as HTMLButtonElement;
  const progressDots = document.querySelectorAll('.progress-dot');
  const currentStepElement = document.getElementById('current-step') as HTMLElement;

  function updateSlider() {
    if (sliderTrack) {
      sliderTrack.style.transform = `translateX(-${currentStep * 100}%)`;
    }
    
    // Update progress dots
    progressDots.forEach((dot, index) => {
      if (index === currentStep) {
        dot.classList.add('bg-[#7aa2f7]', 'active');
        dot.classList.remove('bg-[#414868]', 'hover:bg-[#7aa2f7]/50');
      } else {
        dot.classList.remove('bg-[#7aa2f7]', 'active');
        dot.classList.add('bg-[#414868]', 'hover:bg-[#7aa2f7]/50');
      }
    });

    // Update step counter
    if (currentStepElement) {
      currentStepElement.textContent = String(currentStep + 1).padStart(2, '0');
    }

    // Update navigation buttons
    if (prevButton) {
      prevButton.disabled = currentStep === 0;
      prevButton.classList.toggle('opacity-50', currentStep === 0);
    }
    
    if (nextButton) {
      nextButton.disabled = currentStep === totalSteps - 1;
      nextButton.classList.toggle('opacity-50', currentStep === totalSteps - 1);
    }

    // Animate step details
    const currentSlide = document.querySelector(`[data-step="${currentStep}"]`) as HTMLElement;
    if (currentSlide) {
      const stepDetails = currentSlide.querySelectorAll('.step-detail');
      stepDetails.forEach((detail, index) => {
        const detailElement = detail as HTMLElement;
        detailElement.style.animationDelay = `${index * 0.08}s`;
        detail.classList.remove('step-detail');
        void detailElement.offsetWidth; // Trigger reflow
        detail.classList.add('step-detail');
      });
    }
  }

  function nextStep() {
    if (currentStep < totalSteps - 1) {
      currentStep++;
      updateSlider();
    }
  }

  function prevStep() {
    if (currentStep > 0) {
      currentStep--;
      updateSlider();
    }
  }

  // Event listeners
  if (prevButton) {
    prevButton.addEventListener('click', prevStep);
  }

  if (nextButton) {
    nextButton.addEventListener('click', nextStep);
  }

  // Progress dot clicks
  progressDots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      currentStep = index;
      updateSlider();
    });
  });

  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      prevStep();
    } else if (e.key === 'ArrowRight') {
      nextStep();
    }
  });

  // Touch/swipe support
  let touchStartX = 0;
  let touchEndX = 0;

  const sliderContainer = document.getElementById('slider-container');
  if (sliderContainer) {
    sliderContainer.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    sliderContainer.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
  }

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextStep();
      } else {
        prevStep();
      }
    }
  }

  // Initialize
  updateSlider();
</script>
