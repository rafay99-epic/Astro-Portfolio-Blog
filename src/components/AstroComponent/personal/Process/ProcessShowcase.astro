---
const processSteps = [
  {
    step: "01",
    title: "Discovery Call",
    description: "Understanding your business and identifying pain points",
    icon: "phone",
    details: [
      "Get to know the client",
      "Understand their business",
      "Analyze existing products",
      "Identify pain points",
    ],
  },
  {
    step: "02",
    title: "Requirements & Planning",
    description: "Comprehensive planning and solution approach",
    icon: "file-text",
    details: [
      "Write down requirements",
      "Note everything systematically",
      "Plan the solution approach",
      "Set project timeline",
    ],
  },
  {
    step: "03",
    title: "Design & Approval",
    description: "Visual designs and client approval process",
    icon: "palette",
    details: [
      "Set design timeline",
      "Create visual mockups",
      "Get client approval",
      "Finalize design specs",
    ],
  },
  {
    step: "04",
    title: "Development Setup",
    description: "Infrastructure and deployment pipeline setup",
    icon: "settings",
    details: [
      "Setup CI/CD pipeline",
      "Configure live preview",
      "Prepare deployment infrastructure",
      "Ensure smooth delivery",
    ],
  },
  {
    step: "05",
    title: "Coding & Testing",
    description: "Clean code development with thorough testing",
    icon: "code",
    details: [
      "Start development",
      "Write clean code",
      "Fix bugs systematically",
      "Document codebase",
    ],
  },
  {
    step: "06",
    title: "Final Review & Delivery",
    description: "Project delivery and service setup",
    icon: "zap",
    details: [
      "Final client meeting",
      "Deliver the project",
      "Setup payment for services",
      "Close the project",
    ],
  },
];
---

<style>
  /* Slider animations */
  .slider-container {
    overflow: hidden;
    border-radius: 0.75rem;
  }

  .slider-track {
    display: flex;
    transition: transform 0.6s ease-in-out;
  }

  .slider-slide {
    width: 100%;
    flex-shrink: 0;
    padding: 0 0.5rem;
  }

  @media (min-width: 640px) {
    .slider-slide {
      padding: 0 1rem;
    }
  }

  /* Step animations */
  .step-detail {
    opacity: 0;
    transform: translateX(-10px);
    animation: stepDetailIn 0.4s ease-out forwards;
  }

  .step-detail:nth-child(1) {
    animation-delay: 0.08s;
  }
  .step-detail:nth-child(2) {
    animation-delay: 0.16s;
  }
  .step-detail:nth-child(3) {
    animation-delay: 0.24s;
  }
  .step-detail:nth-child(4) {
    animation-delay: 0.32s;
  }

  @keyframes stepDetailIn {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Header animations */
  .header-animate {
    opacity: 0;
    transform: translateY(30px);
    animation: headerFadeIn 0.6s ease-out forwards;
  }

  @keyframes headerFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Slider container animation */
  .slider-animate {
    opacity: 0;
    transform: translateY(30px);
    animation: sliderFadeIn 0.8s ease-out 0.2s forwards;
  }

  @keyframes sliderFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Navigation button hover effects */
  .nav-button {
    transition: all 0.3s ease;
  }

  .nav-button:hover:not(:disabled) {
    transform: scale(1.1);
    box-shadow: 0 0 20px rgba(122, 162, 247, 0.3);
  }

  .nav-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Progress indicator animations */
  .progress-dot {
    transition: all 0.3s ease;
  }

  .progress-dot:hover {
    transform: scale(1.2);
  }

  .progress-dot.active {
    transform: scale(1.25);
  }
</style>

<section
  class="relative overflow-hidden bg-[#1a1b26] px-4 py-12 sm:px-6 sm:py-16 lg:px-8"
>
  <div class="mx-auto max-w-7xl">
    <div class="header-animate mb-8 text-center sm:mb-12">
      <h2
        class="mb-4 text-3xl font-black text-[#c0caf5] sm:text-4xl lg:text-5xl"
      >
        How We
        <span
          class="bg-gradient-to-r from-[#7aa2f7] to-[#bb9af7] bg-clip-text text-transparent"
        >
          Build Stuff
        </span>
      </h2>
      <p class="mx-auto max-w-2xl text-base text-[#a9b1d6] sm:text-lg">
        A streamlined process that delivers results efficiently
      </p>
    </div>

    <div class="slider-animate relative">
      <button
        id="prev-button"
        class="nav-button absolute left-0 top-1/2 z-10 -ml-6 flex h-10 w-10 -translate-y-1/2 items-center justify-center rounded-full border border-[#414868]/50 bg-[#24283b]/80 text-[#a9b1d6] backdrop-blur-sm transition-all duration-300 hover:border-[#7aa2f7]/50 hover:text-[#7aa2f7] sm:h-12 sm:w-12"
        aria-label="Previous slide"
        aria-disabled="true"
        disabled
      >
        <svg
          class="h-5 w-5 sm:h-6 sm:w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        id="next-button"
        class="nav-button absolute right-0 top-1/2 z-10 -mr-6 flex h-10 w-10 -translate-y-1/2 items-center justify-center rounded-full border border-[#414868]/50 bg-[#24283b]/80 text-[#a9b1d6] backdrop-blur-sm transition-all duration-300 hover:border-[#7aa2f7]/50 hover:text-[#7aa2f7] sm:h-12 sm:w-12"
        aria-label="Next slide"
        aria-disabled="false"
      >
        <svg
          class="h-5 w-5 sm:h-6 sm:w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <div id="slider-container" class="slider-container">
        <div id="slider-track" class="slider-track">
          {
            processSteps.map((step, index) => (
              <div class="slider-slide" data-step={index}>
                <div class="h-full rounded-xl border border-[#414868]/30 bg-[#24283b]/50 p-6 sm:p-8">
                  <div class="mb-6 flex items-center gap-4">
                    <div class="flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-r from-[#7aa2f7] to-[#bb9af7] text-lg font-bold text-white sm:h-16 sm:w-16 sm:text-xl">
                      {step.step}
                    </div>
                    <div class="flex-1">
                      <h3 class="mb-2 text-xl font-bold text-[#c0caf5] sm:text-2xl lg:text-3xl">
                        {step.title}
                      </h3>
                      <p class="text-sm text-[#a9b1d6] sm:text-base">
                        {step.description}
                      </p>
                    </div>
                    <div class="flex-shrink-0 text-[#7aa2f7]">
                      {step.icon === "phone" && (
                        <svg
                          class="h-8 w-8 sm:h-10 sm:w-10"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                          />
                        </svg>
                      )}
                      {step.icon === "file-text" && (
                        <svg
                          class="h-8 w-8 sm:h-10 sm:w-10"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                          />
                        </svg>
                      )}
                      {step.icon === "palette" && (
                        <svg
                          class="h-8 w-8 sm:h-10 sm:w-10"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"
                          />
                        </svg>
                      )}
                      {step.icon === "settings" && (
                        <svg
                          class="h-8 w-8 sm:h-10 sm:w-10"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                          />
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                          />
                        </svg>
                      )}
                      {step.icon === "code" && (
                        <svg
                          class="h-8 w-8 sm:h-10 sm:w-10"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
                          />
                        </svg>
                      )}
                      {step.icon === "zap" && (
                        <svg
                          class="h-8 w-8 sm:h-10 sm:w-10"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M13 10V3L4 14h7v7l9-11h-7z"
                          />
                        </svg>
                      )}
                    </div>
                  </div>

                  <div class="space-y-4">
                    <h4 class="text-sm font-semibold uppercase tracking-wider text-[#7aa2f7]">
                      What We Do
                    </h4>
                    <div class="grid grid-cols-1 gap-3 sm:grid-cols-2">
                      {step.details.map((detail) => (
                        <div class="step-detail flex items-center gap-3">
                          <svg
                            class="h-4 w-4 flex-shrink-0 text-[#9ece6a]"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M5 13l4 4L19 7"
                            />
                          </svg>
                          <span class="text-sm text-[#a9b1d6] sm:text-base">
                            {detail}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>

      <div class="mt-6 flex justify-center gap-2">
        {
          processSteps.map((_, index) => (
            <button
              class={`progress-dot h-2 w-2 rounded-full transition-all duration-300 sm:h-3 sm:w-3 ${
                index === 0
                  ? "active bg-[#7aa2f7]"
                  : "bg-[#414868] hover:bg-[#7aa2f7]/50"
              }`}
              data-step={index}
              aria-label={`Go to slide ${index + 1}`}
              role="tab"
              aria-selected={index === 0}
              tabindex={index === 0 ? "0" : "-1"}
            />
          ))
        }
      </div>

      <div class="mt-4 text-center">
        <span class="text-sm text-[#a9b1d6]">
          <span id="current-step" class="font-semibold text-[#7aa2f7]">01</span>
          <span id="total-steps"
            >{String(processSteps.length).padStart(2, "0")}</span
          >
        </span>
      </div>
    </div>
  </div>
</section>

<script>
  let currentStep = 0;
  const totalSteps = document.querySelectorAll(".progress-dot").length || 0;
  const sliderTrack = document.getElementById("slider-track") as HTMLElement;
  const prevButton = document.getElementById(
    "prev-button",
  ) as HTMLButtonElement;
  const nextButton = document.getElementById(
    "next-button",
  ) as HTMLButtonElement;
  const progressDots = document.querySelectorAll(".progress-dot");
  const currentStepElement = document.getElementById(
    "current-step",
  ) as HTMLElement;

  function updateSlider() {
    if (sliderTrack) {
      sliderTrack.style.transform = `translateX(-${currentStep * 100}%)`;
    }

    progressDots.forEach((dot, index) => {
      if (index === currentStep) {
        dot.classList.add("bg-[#7aa2f7]", "active");
        dot.classList.remove("bg-[#414868]", "hover:bg-[#7aa2f7]/50");
        dot.setAttribute("aria-selected", "true");
        dot.setAttribute("tabindex", "0");
      } else {
        dot.classList.remove("bg-[#7aa2f7]", "active");
        dot.classList.add("bg-[#414868]", "hover:bg-[#7aa2f7]/50");
        dot.setAttribute("aria-selected", "false");
        dot.setAttribute("tabindex", "-1");
      }
    });

    if (currentStepElement) {
      currentStepElement.textContent = String(currentStep + 1).padStart(2, "0");
    }

    if (prevButton) {
      const isDisabled = currentStep === 0;
      prevButton.disabled = isDisabled;
      prevButton.setAttribute("aria-disabled", isDisabled.toString());
      prevButton.classList.toggle("opacity-50", isDisabled);
    }

    if (nextButton) {
      const isDisabled = currentStep === totalSteps - 1;
      nextButton.disabled = isDisabled;
      nextButton.setAttribute("aria-disabled", isDisabled.toString());
      nextButton.classList.toggle("opacity-50", isDisabled);
    }

    const currentSlide = document.querySelector(
      `[data-step="${currentStep}"]`,
    ) as HTMLElement;
    if (currentSlide) {
      const stepDetails = currentSlide.querySelectorAll(".step-detail");
      stepDetails.forEach((detail, index) => {
        const detailElement = detail as HTMLElement;
        detailElement.style.animationDelay = `${index * 0.08}s`;
        detail.classList.remove("step-detail");
        void detailElement.offsetWidth;
        detail.classList.add("step-detail");
      });
    }
  }

  function nextStep() {
    if (currentStep < totalSteps - 1) {
      currentStep++;
      updateSlider();
    }
  }

  function prevStep() {
    if (currentStep > 0) {
      currentStep--;
      updateSlider();
    }
  }

  if (prevButton) {
    prevButton.addEventListener("click", prevStep);
  }

  if (nextButton) {
    nextButton.addEventListener("click", nextStep);
  }

  progressDots.forEach((dot, index) => {
    dot.addEventListener("click", () => {
      currentStep = index;
      updateSlider();
    });
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      prevStep();
    } else if (e.key === "ArrowRight") {
      nextStep();
    }
  });

  let touchStartX = 0;
  let touchEndX = 0;

  const sliderContainer = document.getElementById("slider-container");
  if (sliderContainer) {
    sliderContainer.addEventListener("touchstart", (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    sliderContainer.addEventListener("touchend", (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
  }

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        nextStep();
      } else {
        prevStep();
      }
    }
  }

  updateSlider();

  if (prevButton) {
    prevButton.removeAttribute("disabled");
  }
  if (nextButton) {
    nextButton.removeAttribute("disabled");
  }
</script>
