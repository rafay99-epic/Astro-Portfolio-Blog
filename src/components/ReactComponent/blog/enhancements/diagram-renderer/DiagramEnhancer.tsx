// import React, { useEffect, useRef } from "react";
// import { FiCopy, FiMaximize2, FiX, FiCheck } from "react-icons/fi";

// export const DiagramEnhancer: React.FC = () => {
//   const [fullscreenDiagram, setFullscreenDiagram] =
//     React.useState<HTMLElement | null>(null);
//   const [copied, setCopied] = React.useState(false);

//   useEffect(() => {
//     const enhanceDiagrams = () => {
//       // Look for img elements with mermaid IDs (generated by rehype-mermaid with img-svg strategy)
//       const imgElements = document.querySelectorAll("img[id^='mermaid']");
//       console.log("Found Mermaid diagram images:", imgElements.length);

//       imgElements.forEach((img, index) => {
//         // Skip if already enhanced
//         if (img.closest(".diagram-enhanced")) {
//           console.log(`Diagram ${index} already enhanced`);
//           return;
//         }

//         // Check if it's a valid mermaid diagram image
//         const rect = img.getBoundingClientRect();
//         const hasValidSrc = (img as HTMLImageElement).src.includes(
//           "data:image"
//         );

//         if (rect.width > 100 && rect.height > 50 && hasValidSrc) {
//           console.log(`Enhancing diagram ${index}:`, img);

//           // Create wrapper using theme classes
//           const wrapper = document.createElement("div");
//           wrapper.className =
//             "diagram-enhanced relative group bg-theme-bg-card rounded-lg border border-theme-border-accent p-4 overflow-x-auto mb-4";

//           // Create controls container
//           const controls = document.createElement("div");
//           controls.className =
//             "absolute top-2 right-2 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10";

//           // Create copy button using theme classes
//           const copyBtn = document.createElement("button");
//           copyBtn.className =
//             "flex items-center gap-1 px-3 py-2 bg-theme-primary hover:bg-theme-secondary border border-theme-border-primary rounded-lg text-white text-sm transition-all duration-200 backdrop-blur-sm";
//           copyBtn.innerHTML = `
//             <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
//             </svg>
//             <span>Copy SVG</span>
//           `;
//           copyBtn.title = "Copy SVG diagram";

//           // Create fullscreen button using theme classes
//           const fullscreenBtn = document.createElement("button");
//           fullscreenBtn.className =
//             "flex items-center gap-1 px-3 py-2 bg-theme-accent hover:bg-theme-primary border border-theme-border-primary rounded-lg text-white text-sm transition-all duration-200 backdrop-blur-sm";
//           fullscreenBtn.innerHTML = `
//             <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
//             </svg>
//             <span>Fullscreen</span>
//           `;
//           fullscreenBtn.title = "View fullscreen";

//           // Add event listeners
//           copyBtn.addEventListener("click", (e) => {
//             e.stopPropagation();
//             e.preventDefault();
//             console.log("Copy button clicked");

//             // Show immediate visual feedback
//             const originalContent = copyBtn.innerHTML;
//             copyBtn.innerHTML = `
//               <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
//               </svg>
//               <span>SVG Copied!</span>
//             `;
//             copyBtn.className =
//               "flex items-center gap-1 px-3 py-2 bg-green-600 border border-green-500 rounded-lg text-white text-sm transition-all duration-200 backdrop-blur-sm";

//             // Copy the diagram
//             handleCopy(img as HTMLImageElement);

//             // Reset after 2 seconds
//             setTimeout(() => {
//               copyBtn.innerHTML = originalContent;
//               copyBtn.className =
//                 "flex items-center gap-1 px-3 py-2 bg-theme-primary hover:bg-theme-secondary border border-theme-border-primary rounded-lg text-white text-sm transition-all duration-200 backdrop-blur-sm";
//             }, 2000);
//           });

//           fullscreenBtn.addEventListener("click", (e) => {
//             e.stopPropagation();
//             e.preventDefault();
//             console.log("Fullscreen button clicked");
//             handleFullscreen(wrapper);
//           });

//           // Assemble the enhanced diagram
//           controls.appendChild(copyBtn);
//           controls.appendChild(fullscreenBtn);

//           // Wrap the IMG element
//           img.parentNode?.insertBefore(wrapper, img);
//           wrapper.appendChild(img);
//           wrapper.appendChild(controls);

//           // Ensure the img is properly styled
//           (img as HTMLImageElement).className = "max-w-full h-auto mx-auto";

//           console.log(`Successfully enhanced diagram ${index}`);
//         } else {
//           console.log(
//             `Skipped diagram ${index} - invalid:`,
//             rect.width,
//             rect.height,
//             hasValidSrc
//           );
//         }
//       });

//       // Also check for any other large images that might be diagrams
//       const otherImgs = document.querySelectorAll("img:not([id^='mermaid'])");
//       console.log("Found other images:", otherImgs.length);

//       otherImgs.forEach((img, index) => {
//         if (img.closest(".diagram-enhanced")) return;

//         const rect = img.getBoundingClientRect();
//         const src = (img as HTMLImageElement).src;

//         // Look for SVG data URLs or large images that might be diagrams
//         if (
//           (src.includes("data:image/svg") || src.includes("svg")) &&
//           rect.width > 200 &&
//           rect.height > 100
//         ) {
//           console.log(`Found potential diagram image ${index}:`, img);
//           // Apply the same enhancement logic here if needed
//         }
//       });
//     };

//     // Run enhancement after DOM is ready and content is loaded
//     const runEnhancement = () => {
//       console.log("Running diagram enhancement...");
//       enhanceDiagrams();
//     };

//     // Multiple strategies to ensure we catch the diagrams
//     const timer = setTimeout(runEnhancement, 100);
//     const timer2 = setTimeout(runEnhancement, 500);
//     const timer3 = setTimeout(runEnhancement, 1000);

//     // Run on DOM ready
//     if (document.readyState === "loading") {
//       document.addEventListener("DOMContentLoaded", runEnhancement);
//     } else {
//       runEnhancement();
//     }

//     // Set up mutation observer for dynamic content
//     const observer = new MutationObserver((mutations) => {
//       let shouldEnhance = false;
//       mutations.forEach((mutation) => {
//         mutation.addedNodes.forEach((node) => {
//           if (node.nodeType === Node.ELEMENT_NODE) {
//             const element = node as Element;
//             if (element.tagName === "IMG" || element.querySelector("img")) {
//               shouldEnhance = true;
//             }
//           }
//         });
//       });

//       if (shouldEnhance) {
//         setTimeout(runEnhancement, 100);
//       }
//     });

//     observer.observe(document.body, {
//       childList: true,
//       subtree: true,
//     });

//     return () => {
//       clearTimeout(timer);
//       clearTimeout(timer2);
//       clearTimeout(timer3);
//       observer.disconnect();
//     };
//   }, []);

//   // Add ESC key listener for closing fullscreen
//   useEffect(() => {
//     const handleKeyDown = (event: KeyboardEvent) => {
//       if (event.key === "Escape" && fullscreenDiagram) {
//         console.log("ESC key pressed, closing fullscreen");
//         closeFullscreen();
//       }
//     };

//     if (fullscreenDiagram) {
//       document.addEventListener("keydown", handleKeyDown);
//       // Prevent body scroll when modal is open
//       document.body.style.overflow = "hidden";
//     } else {
//       // Restore body scroll
//       document.body.style.overflow = "";
//     }

//     return () => {
//       document.removeEventListener("keydown", handleKeyDown);
//       document.body.style.overflow = "";
//     };
//   }, [fullscreenDiagram]);

//   const handleCopy = async (img: HTMLImageElement) => {
//     try {
//       console.log("Copying diagram:", img);

//       // If it's a data URL, we can try to extract the SVG content
//       if (img.src.startsWith("data:image/svg")) {
//         // Extract SVG from data URL
//         const svgData = decodeURIComponent(img.src.split(",")[1]);
//         await navigator.clipboard.writeText(svgData);
//         setCopied(true);
//         setTimeout(() => setCopied(false), 2000);
//         console.log("Diagram SVG copied successfully");
//       } else {
//         // For other formats, copy the data URL itself
//         await navigator.clipboard.writeText(img.src);
//         setCopied(true);
//         setTimeout(() => setCopied(false), 2000);
//         console.log("Diagram data URL copied successfully");
//       }
//     } catch (err) {
//       console.error("Failed to copy diagram:", err);
//       // Fallback: try to copy the alt text or something
//       try {
//         await navigator.clipboard.writeText(img.alt || "Mermaid Diagram");
//       } catch (fallbackErr) {
//         console.error("Fallback copy also failed:", fallbackErr);
//       }
//     }
//   };

//   const closeFullscreen = () => {
//     console.log("Closing fullscreen");
//     setFullscreenDiagram(null);
//   };

//   const handleFullscreen = (wrapper: HTMLElement) => {
//     console.log("Opening fullscreen:", wrapper);
//     setFullscreenDiagram(wrapper);
//   };

//   return (
//     <>
//       {/* Fullscreen Modal */}
//       {fullscreenDiagram && (
//         <div
//           className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
//           onClick={closeFullscreen}
//         >
//           <div
//             className="relative max-w-7xl max-h-full w-full bg-theme-bg-primary rounded-xl border border-theme-border-accent shadow-2xl overflow-hidden"
//             onClick={(e) => e.stopPropagation()}
//           >
//             {/* Modal Header */}
//             <div className="flex items-center justify-between p-4 border-b border-theme-border-primary bg-theme-bg-secondary">
//               <h3 className="text-lg font-semibold text-theme-text-primary">
//                 Diagram - Fullscreen View
//               </h3>
//               <div className="flex items-center gap-4">
//                 <button
//                   onClick={() => {
//                     const img = fullscreenDiagram.querySelector("img");
//                     if (img) handleCopy(img);
//                   }}
//                   className={`flex items-center gap-1 px-3 py-2 border rounded-lg text-sm transition-all duration-200 ${
//                     copied
//                       ? "bg-green-600 border-green-500 text-white"
//                       : "bg-theme-bg-card hover:bg-theme-bg-primary border-theme-border-primary text-theme-text-primary"
//                   }`}
//                   title={
//                     copied ? "SVG copied to clipboard!" : "Copy SVG diagram"
//                   }
//                 >
//                   {copied ? (
//                     <>
//                       <FiCheck className="w-4 h-4" />
//                       <span>SVG Copied!</span>
//                     </>
//                   ) : (
//                     <>
//                       <FiCopy className="w-4 h-4" />
//                       <span>Copy SVG</span>
//                     </>
//                   )}
//                 </button>
//                 <div className="flex items-center gap-2 text-theme-text-secondary text-sm">
//                   <kbd className="px-2 py-1 bg-theme-bg-card border border-theme-border-primary rounded text-xs font-mono">
//                     ESC
//                   </kbd>
//                   <span>to exit</span>
//                 </div>
//               </div>
//             </div>

//             {/* Modal Content */}
//             <div className="p-6 overflow-auto max-h-[calc(100vh-120px)] bg-theme-bg-card">
//               <div className="flex justify-center">
//                 {fullscreenDiagram && (
//                   <div
//                     dangerouslySetInnerHTML={{
//                       __html: fullscreenDiagram.innerHTML,
//                     }}
//                   />
//                 )}
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </>
//   );
// };
