---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/AstroComponent/base/BaseHead.astro";
import Header from "../components/AstroComponent/header/Header.astro";
import Footer from "../components/AstroComponent/footer/Footer.astro";
import ContentContainer from "../components/AstroComponent/blog/layout/ContentContainer.astro";
import SpeedInsights from "@vercel/speed-insights/astro";
import PostComment from "../components/AstroComponent/blog/comments/PostComment.astro";
import { featureFlags } from "../config/featureFlag/featureFlag.json";
import { getCollection } from "astro:content";
import AISummaryCard from "../components/ReactComponent/blog/enhancements/summary-card/summary_blog";
import BlogHeader from "../components/ReactComponent/blog/layout/BlogPostLayout/BlogPostLayoutHeader";
import { QAChatWidget } from "../components/ReactComponent/blog/enhancements/qa-chat/QAChatWidget";
import CodeCopySimple from "../components/ReactComponent/blog/enhancements/code-copy/CodeCopySimple";
import MermaidRenderer from "../components/ReactComponent/blog/enhancements/diagram-renderer/MermaidRenderer";
export const prerender = true;
import { SEO } from "astro-seo";
import { getImagePath } from "astro-opengraph-images";

const { url, site } = Astro;
const openGraphImageUrl = getImagePath({ url, site });

const pageUrl = Astro.url.href;
type Props = CollectionEntry<"blog">["data"];

try {
  if (!featureFlags.showBlog) {
    return Astro.redirect("/access-denied");
  }
} catch (error) {
  return Astro.redirect("/404");
}

const BlogPosts = featureFlags.showBlog
  ? (await getCollection("blog"))
      .filter(post => !post.data.draft) // Only published posts
      .sort((a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf())
  : [];

const currentSlug = Astro.url.pathname.split("/").filter(Boolean).pop();
const currentBlog = BlogPosts.find((post) => post.slug === currentSlug);

if (!currentBlog) {
  return Astro.redirect("/access-denied");
}

const blogContent = currentBlog.body;

const {
  title,
  description,
  pubDate,
  heroImage,
  authorName,
  authorAvatar,
  tags,
  readTime,
  keywords,
  canonicalUrl,
  featured,
  excerpt,
} = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} 
    image={heroImage}
    />
    <SpeedInsights />
    <style>
      .blog-container {
        min-height: 100vh;
        position: relative;
      }

      #scroll-progress {
        position: fixed;
        top: 0;
        left: 0;
        height: 4px;
        background: linear-gradient(
          90deg,
          #7aa2f7 0%,
          #bb9af7 50%,
          #9ece6a 100%
        );
        transform: scaleX(0);
        transform-origin: left;
        transition: transform 0.1s linear;
        width: 100%;
        z-index: 50;
        pointer-events: none;
        box-shadow: 0 2px 12px rgba(122, 162, 247, 0.4);
      }

      #scroll-progress::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          90deg,
          rgba(122, 162, 247, 0.8) 0%,
          rgba(187, 154, 247, 0.8) 50%,
          rgba(158, 206, 106, 0.8) 100%
        );
        filter: blur(2px);
        z-index: -1;
      }

      .main-content {
        opacity: 1;
      }

      .comments-section {
        opacity: 1;
      }

      .comments-container {
        background: rgba(26, 27, 38, 0.6);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(86, 95, 137, 0.2);
        border-radius: 20px;
        padding: 32px;
        margin-top: 32px;
        position: relative;
        overflow: hidden;
      }

      .comments-container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          135deg,
          rgba(122, 162, 247, 0.03) 0%,
          rgba(187, 154, 247, 0.03) 100%
        );
        pointer-events: none;
      }

      .comments-header {
        text-align: center;
        margin-bottom: 2rem;
        position: relative;
        z-index: 1;
      }

      .comments-title {
        font-size: 2.5rem;
        font-weight: bold;
        background: linear-gradient(135deg, #7aa2f7, #bb9af7);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
      }

      .blog-typography {
        line-height: 1.8;
        font-size: 1.1rem;
      }

      .blog-typography h1,
      .blog-typography h2,
      .blog-typography h3,
      .blog-typography h4,
      .blog-typography h5,
      .blog-typography h6 {
        margin-top: 2.5rem;
        margin-bottom: 1rem;
        scroll-margin-top: 100px;
      }

      .blog-typography h2 {
        border-left: 4px solid #7aa2f7;
        padding-left: 1rem;
        background: rgba(122, 162, 247, 0.05);
        padding: 0.5rem 1rem;
        border-radius: 8px;
      }

      .blog-typography h3 {
        color: #bb9af7;
        position: relative;
      }

      .blog-typography h3::before {
        content: "üìù";
        margin-right: 0.5rem;
      }

      .blog-typography blockquote {
        background: rgba(122, 162, 247, 0.1);
        border-left: 4px solid #7aa2f7;
        padding: 1rem 1.5rem;
        margin: 1.5rem 0;
        border-radius: 0 8px 8px 0;
      }

      .blog-typography ul li::marker {
        color: #7aa2f7;
      }

      .blog-typography ol li::marker {
        color: #bb9af7;
        font-weight: bold;
      }

      @media (max-width: 600px) {
        .main-content {
          padding: 0.5rem !important;
        }

        .blog-typography {
          font-size: 1rem;
          line-height: 1.7;
        }

        .comments-container {
          padding: 24px;
        }

        .comments-title {
          font-size: 2rem;
        }

        #scroll-progress {
          height: 3px;
        }
      }

      /* Unified Section Styles */
      .unified-section {
        background: linear-gradient(135deg, rgba(26, 27, 38, 0.8) 0%, rgba(26, 27, 38, 0.6) 100%);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(86, 95, 137, 0.2);
        border-radius: 20px;
        padding: 32px;
        position: relative;
        overflow: hidden;
      }

      .unified-section::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(122, 162, 247, 0.03) 0%, rgba(187, 154, 247, 0.03) 100%);
        pointer-events: none;
      }

      .section-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 24px;
        position: relative;
        z-index: 1;
      }

      .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #a9b1d6;
        display: flex;
        align-items: center;
        gap: 12px;
        margin: 0;
      }

      .section-icon {
        width: 20px;
        height: 20px;
        color: #7aa2f7;
      }

      .section-badge {
        font-size: 0.75rem;
        color: #565f89;
        background: rgba(26, 27, 38, 0.6);
        padding: 4px 12px;
        border-radius: 12px;
        border: 1px solid rgba(86, 95, 137, 0.2);
      }

      .section-grid {
        display: grid;
        gap: 16px;
        grid-template-columns: 1fr;
        position: relative;
        z-index: 1;
      }

      @media (min-width: 768px) {
        .section-grid {
          grid-template-columns: repeat(2, 1fr);
        }
      }

      @media (min-width: 1024px) {
        .section-grid {
          grid-template-columns: repeat(3, 1fr);
        }
      }

      .section-item {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        padding: 16px;
        background: rgba(26, 27, 38, 0.4);
        border: 1px solid rgba(86, 95, 137, 0.1);
        border-radius: 12px;
        transition: all 0.3s ease;
        text-decoration: none;
        position: relative;
        overflow: hidden;
      }

      .section-item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(122, 162, 247, 0.05) 0%, rgba(187, 154, 247, 0.05) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .section-item:hover {
        border-color: rgba(122, 162, 247, 0.3);
        background: rgba(26, 27, 38, 0.6);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(122, 162, 247, 0.15);
      }

      .section-item:hover::before {
        opacity: 1;
      }

      .item-number {
        font-size: 0.75rem;
        font-weight: 600;
        color: #7aa2f7;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        background: rgba(122, 162, 247, 0.1);
        padding: 4px 8px;
        border-radius: 6px;
        min-width: 32px;
        text-align: center;
        position: relative;
        z-index: 1;
      }

      .item-text {
        color: #a9b1d6;
        font-size: 0.875rem;
        font-weight: 500;
        line-height: 1.4;
        position: relative;
        z-index: 1;
        flex: 1;
      }

      .item-content {
        flex: 1;
        position: relative;
        z-index: 1;
      }

      .item-title {
        color: #a9b1d6;
        font-size: 0.875rem;
        font-weight: 600;
        line-height: 1.4;
        margin: 0 0 8px 0;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .item-description {
        color: #565f89;
        font-size: 0.75rem;
        line-height: 1.5;
        margin: 0 0 12px 0;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .item-meta {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.625rem;
        color: #565f89;
      }

      .section-footer {
        text-align: center;
        margin-top: 16px;
        position: relative;
        z-index: 1;
      }

      .footer-text {
        font-size: 0.75rem;
        color: #565f89;
      }
    </style>

    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "article",
          image: heroImage ? new URL(heroImage, Astro.url).toString() : openGraphImageUrl,
          url: pageUrl,
        },
        optional: {
          description: description,
          locale: "en_US",
          siteName: "Rafay99",
        },
      }}
      twitter={{
        card: "summary_large_image",
        site: "@rafay99",
        creator: "@rafay99",
      }}
    />

    <!-- Structured Data for Blog Post -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": title,
      "description": description,
      "image": heroImage ? new URL(heroImage, Astro.url).toString() : new URL("/Rafay99.webp", Astro.url).toString(),
      "author": {
        "@type": "Person",
        "name": authorName,
        "image": authorAvatar ? new URL(authorAvatar, Astro.url).toString() : new URL("/author.jpg", Astro.url).toString(),
        "url": "https://rafay99.com"
      },
      "publisher": {
        "@type": "Organization",
        "name": "Rafay99",
        "logo": {
          "@type": "ImageObject",
          "url": new URL("/favicon.webp", Astro.url).toString()
        }
      },
      "datePublished": pubDate.toISOString(),
      "dateModified": currentBlog.data.updatedDate?.toISOString() || pubDate.toISOString(),
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": pageUrl
      },
      "keywords": tags?.join(", ") || "blog, technology, programming",
      "articleSection": tags?.[0] || "Technology",
      "wordCount": blogContent.length,
      "timeRequired": readTime || "5 min read"
    })} />

    <!-- Breadcrumb Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": [
        {
          "@type": "ListItem",
          "position": 1,
          "name": "Home",
          "item": "https://rafay99.com"
        },
        {
          "@type": "ListItem",
          "position": 2,
          "name": "Blog",
          "item": "https://rafay99.com/blog"
        },
        {
          "@type": "ListItem",
          "position": 3,
          "name": title,
          "item": pageUrl
        }
      ]
    })} />

    <!-- FAQ Schema for Better Search Visibility -->
    {(() => {
      const faqMatches = blogContent.match(/^#{2,6}\s+(.+)$/gm);
      if (!faqMatches || faqMatches.length < 3) return null;
      
      const faqItems = faqMatches.slice(0, 5).map((heading, index) => {
        const text = heading.replace(/^#{2,6}\s+/, '');
        return {
          "@type": "Question",
          "name": text,
          "acceptedAnswer": {
            "@type": "Answer",
            "text": `This section covers ${text.toLowerCase()}. Read the full article for detailed information.`
          }
        };
      });
      
      return (
        <script type="application/ld+json" set:html={JSON.stringify({
          "@context": "https://schema.org",
          "@type": "FAQPage",
          "mainEntity": faqItems
        })} />
      );
    })()}

    <!-- Additional SEO Meta Tags -->
    <meta name="author" content={authorName} />
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    <meta name="googlebot" content="index, follow">
    <meta name="bingbot" content="index, follow">
    <meta name="copyright" content="¬© 2025 Abdul Rafay">
    <meta name="keywords" content={keywords?.join(", ") || tags?.join(", ") || "blog, technology, programming"} />
    <meta name="article:published_time" content={pubDate.toISOString()} />
    {currentBlog.data.updatedDate && (
      <meta name="article:modified_time" content={currentBlog.data.updatedDate.toISOString()} />
    )}
    <meta name="article:author" content={authorName} />
    {tags?.map(tag => (
      <meta name="article:tag" content={tag} />
    ))}
    <meta name="article:section" content={tags?.[0] || "Technology"} />
    {featured && <meta name="article:featured" content="true" />}
    {excerpt && <meta name="description" content={excerpt} />}
    
    <!-- Preload hero image for better performance -->
    {heroImage && (
      <link rel="preload" as="image" href={heroImage} />
    )}

    <!-- Enhanced SEO Meta Tags -->
    <meta name="revisit-after" content="7 days" />
    <meta name="rating" content="general" />
    <meta name="distribution" content="global" />
    <meta name="coverage" content="worldwide" />
    <meta name="target" content="all" />
    <meta name="HandheldFriendly" content="true" />
    <meta name="format-detection" content="telephone=no" />
    
    <!-- Social Media Enhanced Meta Tags -->
    <meta property="og:locale" content="en_US" />
    <meta property="og:type" content="article" />
    <meta property="og:site_name" content="Rafay99" />
    <meta property="og:published_time" content={pubDate.toISOString()} />
    {currentBlog.data.updatedDate && (
      <meta property="og:modified_time" content={currentBlog.data.updatedDate.toISOString()} />
    )}
    {tags?.map(tag => (
      <meta property="og:tag" content={tag} />
    ))}
    
    <!-- Twitter Enhanced Meta Tags -->
    <meta name="twitter:label1" content="Reading time" />
    <meta name="twitter:data1" content={readTime || "5 min read"} />
    <meta name="twitter:label2" content="Category" />
    <meta name="twitter:data2" content={tags?.[0] || "Technology"} />
    
    <!-- Canonical URL -->
    {canonicalUrl ? (
      <link rel="canonical" href={canonicalUrl} />
    ) : (
      <link rel="canonical" href={pageUrl} />
    )}
    
    <!-- Language and Region -->
    <meta name="language" content="English" />
    <meta name="geo.region" content="US" />
    <meta name="geo.placename" content="United States" />
    
    <!-- Content Security Policy for better security -->
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
  </head>
  <body class="blog-container" style="overflow-x: hidden; overflow-y: auto;">
    <Header />
    <div id="scroll-progress"></div>

    <main
      class="max-w-5xl mx-auto w-full px-6 py-8 md:py-12 overflow-x-hidden main-content"
    >
      <section class="mb-12">
        <BlogHeader
          client:visible
          title={title ?? "Untitled"}
          date={new Date(pubDate).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })}
          authorName={authorName ?? "Anonymous"}
          authorAvatar={authorAvatar ?? "/default-avatar.png"}
          coverImage={heroImage ?? "/default-cover.jpg"}
          tags={tags}
          readtime={readTime}
        />
        <div class="mt-8">
          <AISummaryCard
            client:load
            title={title}
            description={description}
            author={authorName}
            content={blogContent}
          />
        </div>
      </section>



      <!-- Main Content -->
      <div class="w-full">
        <ContentContainer withBackground={false} class="blog-typography">
          <slot />
        </ContentContainer>
      </div>

      <!-- Smart Table of Contents (appears after content hook) -->
      {(() => {
        const headings = blogContent.match(/^#{2,6}\s+(.+)$/gm) || [];
        if (headings.length < 3) return null;
        
        return (
          <div class="smart-toc my-12" id="smart-toc">
            <div class="unified-section">
              <div class="section-header">
                <h3 class="section-title">
                  <svg class="section-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                  </svg>
                  What's in this article?
                </h3>
                <span class="section-badge">
                  {headings.length} sections
                </span>
              </div>
              
              <div class="section-grid">
                {headings.slice(0, 9).map((heading, index) => {
                  const level = heading.indexOf(' ');
                  const text = heading.substring(level + 1);
                  const id = text.toLowerCase().replace(/[^a-z0-9\s-]/g, '').replace(/\s+/g, '-');
                  
                  return (
                    <a
                      href={`#${id}`}
                      class="section-item"
                    >
                      <span class="item-number">
                        {String(index + 1).padStart(2, '0')}
                      </span>
                      <span class="item-text">
                        {text}
                      </span>
                    </a>
                  );
                })}
              </div>
              
              {headings.length > 9 && (
                <div class="section-footer">
                  <span class="footer-text">
                    +{headings.length - 9} more sections
                  </span>
                </div>
              )}
            </div>
          </div>
        );
      })()}

      <!-- Related Posts Section -->
      <div class="related-posts-section my-12">
        <div class="unified-section">
          <div class="section-header">
            <h3 class="section-title">
              <svg class="section-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
              You Might Also Like
            </h3>
            <span class="section-badge">
              {(() => {
                const currentTags = tags || [];
                const relatedPosts = BlogPosts
                  .filter(post => post.slug !== currentSlug)
                  .map(post => {
                    const postTags = post.data.tags || [];
                    let score = 0;
                    currentTags.forEach(tag => {
                      if (postTags.includes(tag)) score += 3;
                    });
                    return { post, score };
                  })
                  .filter(item => item.score > 0);
                return `${relatedPosts.length} related posts`;
              })()}
            </span>
          </div>
          
          <div class="section-grid">
            {(() => {
              const currentTags = tags || [];
              const relatedPosts = BlogPosts
                .filter(post => post.slug !== currentSlug)
                .map(post => {
                  const postTags = post.data.tags || [];
                  let score = 0;
                  
                  // Calculate relevance based on tags
                  currentTags.forEach(tag => {
                    if (postTags.includes(tag)) score += 3;
                  });
                  
                  return { post, score };
                })
                .filter(item => item.score > 0)
                .sort((a, b) => b.score - a.score)
                .slice(0, 3)
                .map(item => item.post);
              
              return relatedPosts.map((post, index) => (
                <a
                  href={`/blog/${post.slug}`}
                  class="section-item"
                  title={`Read: ${post.data.title}`}
                  rel="related"
                >
                  <span class="item-number">
                    {String(index + 1).padStart(2, '0')}
                  </span>
                  <div class="item-content">
                    <h4 class="item-title">
                      {post.data.title}
                    </h4>
                    <p class="item-description">
                      {post.data.description}
                    </p>
                    <div class="item-meta">
                      <span>{new Date(post.data.pubDate).toLocaleDateString()}</span>
                      {post.data.readTime && (
                        <span>‚Ä¢ {post.data.readTime}</span>
                      )}
                    </div>
                  </div>
                </a>
              ));
            })()}
          </div>
        </div>
      </div>

      <!-- Mermaid Diagram Renderer -->
      <MermaidRenderer client:load />

      <!-- Code Copy Enhancement -->
      <CodeCopySimple client:load />

      <div class="comments-section">
        <div class="comments-container">
          <div class="comments-header">
            <h2 class="comments-title">üí¨ Join the Discussion</h2>
            <p class="text-[#a9b1d6] text-sm">
              Share your thoughts and engage with the community
            </p>
          </div>
          <div class="relative z-1">
            <PostComment />
          </div>
        </div>
      </div>
    </main>

    {
      featureFlags.showQASection && (
        <QAChatWidget
          client:visible
          title={title}
          description={description}
          author={authorName}
          content={blogContent}
        />
      )
    }

    <script is:inline>
      // Prevent auto-scroll restoration and conflicts
      if ("scrollRestoration" in history) {
        history.scrollRestoration = "manual";
      }

      // Prevent initial scroll jumping
      document.addEventListener("DOMContentLoaded", function () {
        setTimeout(() => {
          window.scrollTo(0, 0);
        }, 0);
      });

      // Smart Table of Contents - appears after user is hooked
      document.addEventListener("DOMContentLoaded", function () {
        const toc = document.getElementById('smart-toc');
        if (!toc) return;

        // Initially hide the TOC
        toc.style.opacity = '0';
        toc.style.transform = 'translateY(20px)';
        toc.style.transition = 'opacity 0.6s ease, transform 0.6s ease';

        // Show TOC after user scrolls and gets hooked
        const showTOC = () => {
          const scrollPosition = window.scrollY;
          const triggerPosition = 600; // Show after scrolling 600px (after hook)
          
          if (scrollPosition > triggerPosition) {
            toc.style.opacity = '1';
            toc.style.transform = 'translateY(0)';
            window.removeEventListener('scroll', showTOC);
          }
        };

        window.addEventListener('scroll', showTOC);
      });
    </script>
    <script type="text/partytown" is:inline src="/js/progressbar.js"></script>
    <Footer />
  </body>
</html>
